<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2020-02-03T15:43:34+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">SingularityKChen</title><subtitle>This is the blog of SingularityKChen</subtitle><author><name>Chen, Chunyun</name><email>chency_singularity@163.com</email></author><entry><title type="html">2020/01/27-02/02 weekly review</title><link href="http://localhost:4000/blog/2020/02/02/2020-01-27-02-26-weekly-review/" rel="alternate" type="text/html" title="2020/01/27-02/02 weekly review" /><published>2020-02-02T00:00:00+08:00</published><updated>2020-02-02T00:00:00+08:00</updated><id>http://localhost:4000/blog/2020/02/02/2020-01-27-02-26-weekly-review</id><content type="html" xml:base="http://localhost:4000/blog/2020/02/02/2020-01-27-02-26-weekly-review/">&lt;ul class=&quot;toc&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-20200127-20200202&quot; id=&quot;markdown-toc-heading-20200127-20200202&quot;&gt;2020/01/27-2020/02/02&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-hotchip19&quot; id=&quot;markdown-toc-heading-hotchip19&quot;&gt;HotChip19&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-amd&quot; id=&quot;markdown-toc-heading-amd&quot;&gt;AMD&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-co-designing-architecture-and-infrastructure&quot; id=&quot;markdown-toc-heading-co-designing-architecture-and-infrastructure&quot;&gt;Co-designing architecture and infrastructure&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-nvidia&quot; id=&quot;markdown-toc-heading-nvidia&quot;&gt;NVIDIA&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-huawei&quot; id=&quot;markdown-toc-heading-huawei&quot;&gt;HUAWEI&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-ayar-labs&quot; id=&quot;markdown-toc-heading-ayar-labs&quot;&gt;Ayar Labs&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-tsmc&quot; id=&quot;markdown-toc-heading-tsmc&quot;&gt;TSMC&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-nvidia-1&quot; id=&quot;markdown-toc-heading-nvidia-1&quot;&gt;NVIDIA&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-upmem&quot; id=&quot;markdown-toc-heading-upmem&quot;&gt;UPMEM&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-mlperf&quot; id=&quot;markdown-toc-heading-mlperf&quot;&gt;MLPerf&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-habana-----&quot; id=&quot;markdown-toc-heading-habana-----&quot;&gt;habana     &lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-current-hpc-challenges&quot; id=&quot;markdown-toc-heading-current-hpc-challenges&quot;&gt;Current HPC Challenges&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-new-features-in-improving&quot; id=&quot;markdown-toc-heading-new-features-in-improving&quot;&gt;New features in Improving&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-reference-of-this-week&quot; id=&quot;markdown-toc-heading-reference-of-this-week&quot;&gt;Reference of this week&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;heading-20200127-20200202&quot;&gt;2020/01/27-2020/02/02&lt;/h1&gt;

&lt;p&gt;This week I read a lot of materials related to the state-of-art chip architectures mainly from HPML 2019 and hot-chip 2019. Although the progress of FYP was a little slow this week, I figured out the dataflow and part of control logics of Eyeriss V2, which was rather tricky and time-costing, but does benefit for my next week's implementation. Also, I finished the translation of Chisel-Bootcamp chapter 3 from English to &lt;a href=&quot;https://github.com/SingularityKChen/chisel-bootcamp/tree/zh_cn&quot;&gt;Chinese&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And next week, I'll back to the implementation of Eyeriss. And if I have time, I need to read the papers left weeks ago.&lt;/p&gt;

&lt;h2 id=&quot;heading-hotchip19&quot;&gt;HotChip19&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;h3 id=&quot;heading-amd&quot;&gt;AMD&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;Accelerated core IP&lt;/p&gt;

&lt;p&gt;Chip-let architecture&lt;/p&gt;

&lt;p&gt;High-speed coherent interconnects&lt;/p&gt;

&lt;p&gt;System and software co-optimization&lt;/p&gt;

&lt;p&gt;Continued technology scaling&lt;/p&gt;

&lt;h3 id=&quot;heading-co-designing-architecture-and-infrastructure&quot;&gt;Co-designing architecture and infrastructure&lt;sup id=&quot;fnref:1:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;h4 id=&quot;heading-why&quot;&gt;Why?&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Necessary due to End of Moore’s Law&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Architect infrastructure for usability and scale&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Leverage all areas of expertise&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;heading-dla-co-design&quot;&gt;DLA Co-design:&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;ML research:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Computational requirements for cutting-edge models.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Input/output data feed rates&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Types of operations to accelerate&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Latency and bw requirements&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Trains without loss scaling, unlike float 16&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Latest computational requirements&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Size and scope of models&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;ASIC:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Small mantissa reduces multiplier power, area&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Software:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Proper flexibility and programmability&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Controllability&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Same dynamic range as float 32, same Inf/NaN behavior&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Programmability for parallelism infrastructure&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Compilers:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JIT code-gen &amp;amp; parallel IRs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Systems:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Power delivery, board space.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Board layout&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Thermal limits&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Liquid cooling&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Data Center:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Cooling, buildability&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Wiring and serviceability&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Performance metrics&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Space and network provisioning&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Network requirements&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Power delivery&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;heading-system-co-design&quot;&gt;System Co-design&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Storage systems:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;high bandwidth disks, network&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Accelerators:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;infeed &amp;amp; asynchronous abstractions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Software:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;high throughput, software pipelining, horizontal scaling.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;heading-nvidia&quot;&gt;NVIDIA&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;Network-on-Package and Network-on-Chip&lt;/p&gt;

&lt;p&gt;Use GRS for inter-chip communication&lt;/p&gt;

&lt;p&gt;Tiled architecture with distributed memory&lt;/p&gt;

&lt;p&gt;Scalable DL inference accelerator&lt;/p&gt;

&lt;p&gt;Scaling DL inference across NoP/NoC&lt;/p&gt;

&lt;h3 id=&quot;heading-huawei&quot;&gt;HUAWEI&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/H7yxEtBaC8Q9I6h3/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1D Scalar Unit + 2D Vector Unit + 3D Matrix Unit + 3DSRAM&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/ap7Cp5EJAj8H3rqw/image.png&quot; alt=&quot;Building Blocks and their Computation Intensity&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Memory Wall &amp;amp; I/O Wall&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/kMCfRE7zax0htQ6x/image.png&quot; alt=&quot;Memory Wall &amp;amp; I/O Wall&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3D IC to alleviate memory wall, IO wall and logic wall&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/omoS6GuJwl8liyb4/image.png&quot; alt=&quot;Technology challenges —Why do we need 3DIC&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/Q8SU9NfFKTw4aDTu/image.png&quot; alt=&quot;Mobile AP:  LoL+ MoL&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;heading-ayar-labs&quot;&gt;Ayar Labs&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/GOnjOUjdcgoSoPC4/image.png&quot; alt=&quot;HPE Optical Module&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Chip-to-chip communications requires photonics to overcome I/O bottleneck&lt;/p&gt;

&lt;p&gt;Emerging chip-let ecosystem offers opportunity for in-package optics&lt;/p&gt;

&lt;p&gt;In -package optics fundamentally breaks the traditional bandwidth-distance trade-off and supports new high-performance computer architectures&lt;/p&gt;

&lt;h3 id=&quot;heading-tsmc&quot;&gt;TSMC&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;EoML: end of Moore's Law&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/EgQkw7kANcA41TFX/image.png&quot; alt=&quot;EoM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;COMPUTE-MEMORY INTEGRATION&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/Zp5mPf8BZBk9xybI/image.png&quot; alt=&quot;2D System&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/mHc1escvx3gTCRho/image.png&quot; alt=&quot;2.5D System&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/vxhuvwhCWtcsZqnN/image.png&quot; alt=&quot;3D TSV System&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/JS3t3mbExbgfYSbr/image.png&quot; alt=&quot;N3XT System&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/HmcK46KfrRMhRBvL/image.png&quot; alt=&quot;New Memory System&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;heading-nvidia-1&quot;&gt;NVIDIA&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/yzy4xDIFJkQfdDql/image.png&quot; alt=&quot;Turing SM&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;heading-upmem&quot;&gt;UPMEM&lt;sup id=&quot;fnref:8&quot;&gt;&lt;a href=&quot;#fn:8&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/f1HWhZFJTv0PStT0/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/s9xWmc6cXpAGsZa5/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;heading-mlperf&quot;&gt;MLPerf&lt;sup id=&quot;fnref:9&quot;&gt;&lt;a href=&quot;#fn:9&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;h4 id=&quot;heading-training-metric&quot;&gt;Training Metric&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/5DDQC8PuNvgQNpRX/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/E4KbrvfTZicO6FJ6/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/bKIIRxLitPIxjDiL/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/N0ry1LExtm43snE3/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;heading-inference-metric&quot;&gt;Inference Metric&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/OsZrJLULzqgucABE/image.png&quot; alt=&quot;Inference Metric&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;heading-habana-----&quot;&gt;habana &lt;sup id=&quot;fnref:10&quot;&gt;&lt;a href=&quot;#fn:10&quot; class=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt;  &lt;sup id=&quot;fnref:11&quot;&gt;&lt;a href=&quot;#fn:11&quot; class=&quot;footnote&quot;&gt;11&lt;/a&gt;&lt;/sup&gt;  &lt;sup id=&quot;fnref:12&quot;&gt;&lt;a href=&quot;#fn:12&quot; class=&quot;footnote&quot;&gt;12&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;Designed to scale&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/DydbibtAVokFC6js/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/dDBoToUIq2MXYPNH/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/NPcoEMqDRkM0Xirx/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/Ncs9WisFANo0hhoN/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;heading-current-hpc-challenges&quot;&gt;Current HPC Challenges&lt;/h2&gt;

&lt;p&gt;Large message collective communication and reductions&lt;sup id=&quot;fnref:10:1&quot;&gt;&lt;a href=&quot;#fn:10&quot; class=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Limited network bandwidth&lt;sup id=&quot;fnref:11:1&quot;&gt;&lt;a href=&quot;#fn:11&quot; class=&quot;footnote&quot;&gt;11&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Parallel data access and computation&lt;sup id=&quot;fnref:11:2&quot;&gt;&lt;a href=&quot;#fn:11&quot; class=&quot;footnote&quot;&gt;11&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Low latency (in inference)&lt;sup id=&quot;fnref:12:1&quot;&gt;&lt;a href=&quot;#fn:12&quot; class=&quot;footnote&quot;&gt;12&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Most DL frameworks are optimized for single-node training&lt;sup id=&quot;fnref:10:2&quot;&gt;&lt;a href=&quot;#fn:10&quot; class=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Support different DNN models and layers&lt;sup id=&quot;fnref:12:2&quot;&gt;&lt;a href=&quot;#fn:12&quot; class=&quot;footnote&quot;&gt;12&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Fully utilize HPC clusters&lt;sup id=&quot;fnref:10:3&quot;&gt;&lt;a href=&quot;#fn:10&quot; class=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Memory Wall &amp;amp; I/O Wall&lt;sup id=&quot;fnref:4:1&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;heading-new-features-in-improving&quot;&gt;New features in Improving&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Utilize photonics to overcome network BW bottleneck&lt;sup id=&quot;fnref:5:1&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Designed to scale&lt;sup id=&quot;fnref:13&quot;&gt;&lt;a href=&quot;#fn:13&quot; class=&quot;footnote&quot;&gt;13&lt;/a&gt;&lt;/sup&gt;, &lt;sup id=&quot;fnref:14&quot;&gt;&lt;a href=&quot;#fn:14&quot; class=&quot;footnote&quot;&gt;14&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Co-design the support at runtime level and exploit it at the DL framework level&lt;sup id=&quot;fnref:10:4&quot;&gt;&lt;a href=&quot;#fn:10&quot; class=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Distributed (Parallel) Training&lt;sup id=&quot;fnref:10:5&quot;&gt;&lt;a href=&quot;#fn:10&quot; class=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Platform-aware compression and quantization&lt;/p&gt;

&lt;p&gt;Dynamic adaptive resource management&lt;sup id=&quot;fnref:15&quot;&gt;&lt;a href=&quot;#fn:15&quot; class=&quot;footnote&quot;&gt;15&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Software environment with a subset of hardware platform&lt;/p&gt;

&lt;h2 id=&quot;heading-reference-of-this-week&quot;&gt;Reference of this week&lt;/h2&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;“HC31 (2019),” &lt;em&gt;Hot Chips: A Symposium on High Performance Chips&lt;/em&gt;, 18-Aug-2019. [Online]. Available: https://www.hotchips.org/archives/2010s/hc31/. [Accessed: 31-Jan-2020]. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:1:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;L. Su, “Delivering the Future of High-Performance Computing,” in &lt;em&gt;2019 IEEE Hot Chips 31 Symposium (HCS)&lt;/em&gt;, 2019, pp. 1–43, doi: 10.1109/HOTCHIPS.2019.8875685. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;R. Venkatesan &lt;em&gt;et al.&lt;/em&gt;, “A 0.11 PJ/OP, 0.32-128 Tops, Scalable Multi-Chip-Module-Based Deep Neural Network Accelerator Designed with A High-Productivity vlsi Methodology,” in &lt;em&gt;2019 IEEE Hot Chips 31 Symposium (HCS)&lt;/em&gt;, 2019, pp. 1–24, doi: 10.1109/HOTCHIPS.2019.8875657. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;H. Liao, J. Tu, J. Xia, and X. Zhou, “DaVinci: A Scalable Architecture for Neural Network Computing,” in &lt;em&gt;2019 IEEE Hot Chips 31 Symposium (HCS)&lt;/em&gt;, 2019, pp. 1–44, doi: 10.1109/HOTCHIPS.2019.8875654. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:4:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;M. Wade, “TeraPHY: A Chiplet Technology for Low-Power, High-Bandwidth in-Package Optical I/O,” in &lt;em&gt;2019 IEEE Hot Chips 31 Symposium (HCS)&lt;/em&gt;, 2019, pp. i–xlviii, doi: 10.1109/HOTCHIPS.2019.8875658. &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:5:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot;&gt;
      &lt;p&gt;H.-S. P. Wong, R. Willard, and I. K. Bell, “IC Technology – What Will the Next Node Offer Us?,” in &lt;em&gt;2019 IEEE Hot Chips 31 Symposium (HCS)&lt;/em&gt;, 2019, pp. 1–52, doi: 10.1109/HOTCHIPS.2019.8875692. &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot;&gt;
      &lt;p&gt;J. Burgess, “RTX ON – The NVIDIA TURING GPU,” in &lt;em&gt;2019 IEEE Hot Chips 31 Symposium (HCS)&lt;/em&gt;, 2019, pp. 1–27, doi: 10.1109/HOTCHIPS.2019.8875651. &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:8&quot;&gt;
      &lt;p&gt;F. Devaux, “The true Processing In Memory accelerator,” in &lt;em&gt;2019 IEEE Hot Chips 31 Symposium (HCS)&lt;/em&gt;, 2019, pp. 1–24, doi: 10.1109/HOTCHIPS.2019.8875680. &lt;a href=&quot;#fnref:8&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:9&quot;&gt;
      &lt;p&gt;P. Mattson, “ML Benchmark Design Challenges,” in &lt;em&gt;2019 IEEE Hot Chips 31 Symposium (HCS)&lt;/em&gt;, 2019, pp. 1–36, doi: 10.1109/HOTCHIPS.2019.8875660. &lt;a href=&quot;#fnref:9&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:10&quot;&gt;
      &lt;p&gt;Habana Labs Ltd., “Habana Gaudi Training Platform whitepaper.” Jun-2019. &lt;a href=&quot;#fnref:10&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:10:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:10:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:10:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:10:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:10:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:11&quot;&gt;
      &lt;p&gt;E. Medina, “[Habana Labs presentation],” in &lt;em&gt;2019 IEEE Hot Chips 31 Symposium (HCS)&lt;/em&gt;, 2019, pp. 1–29, doi: 10.1109/HOTCHIPS.2019.8875670. &lt;a href=&quot;#fnref:11&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:11:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:11:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:12&quot;&gt;
      &lt;p&gt;“Training,” &lt;em&gt;Habana&lt;/em&gt;. [Online]. Available: https://habana.ai/training/. [Accessed: 01-Feb-2020]. &lt;a href=&quot;#fnref:12&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:12:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:12:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:13&quot;&gt;
      &lt;p&gt;“HPML 2019: HIGH PERFORMANCE MACHINE LEARNING.” [Online]. Available: https://hpml2019.github.io/#keynote. [Accessed: 28-Jan-2020]. &lt;a href=&quot;#fnref:13&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:14&quot;&gt;
      &lt;p&gt;J. Keuper and F.-J. Preundt, “Distributed Training of Deep Neural Networks: Theoretical and Practical Limits of Parallel Scalability,” in &lt;em&gt;2016 2nd Workshop on Machine Learning in HPC Environments (MLHPC)&lt;/em&gt;, 2016, pp. 19–26, doi: 10.1109/MLHPC.2016.006. &lt;a href=&quot;#fnref:14&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:15&quot;&gt;
      &lt;p&gt;V. Sze, Y.-H. Chen, T.-J. Yang, and J. S. Emer, “Efficient Processing of Deep Neural Networks: A Tutorial and Survey,” &lt;em&gt;Proc. IEEE&lt;/em&gt;, vol. 105, no. 12, pp. 2295–2329, Dec. 2017, doi: 10.1109/JPROC.2017.2761740. &lt;a href=&quot;#fnref:15&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>SingularityKChen</name></author><category term="WeeklyReview" /><category term="hotchip" /><category term="codesign" /><category term="HPC" /><category term="MLPerf" /><category term="habana" /><category term="upmem" /><category term="NVIDIA" /><category term="TSMC" /><category term="HUAWEI" /><category term="AMD" /><category term="AyarLabs" /><summary type="html">There is no thing to show~</summary></entry><entry><title type="html">2020/01/20-26 weekly review</title><link href="http://localhost:4000/blog/2020/01/26/2020-01-20-26-weekly-review/" rel="alternate" type="text/html" title="2020/01/20-26 weekly review" /><published>2020-01-26T00:00:00+08:00</published><updated>2020-01-26T00:00:00+08:00</updated><id>http://localhost:4000/blog/2020/01/26/2020-01-20-26-weekly-review</id><content type="html" xml:base="http://localhost:4000/blog/2020/01/26/2020-01-20-26-weekly-review/">&lt;ul class=&quot;toc&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-20200120-26&quot; id=&quot;markdown-toc-heading-20200120-26&quot;&gt;2020/01/20-26&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-scala--chisel-syntax&quot; id=&quot;markdown-toc-heading-scala--chisel-syntax&quot;&gt;Scala &amp;amp; Chisel Syntax&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-scala-patton-match&quot; id=&quot;markdown-toc-heading-scala-patton-match&quot;&gt;Scala Patton Match&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-grep&quot; id=&quot;markdown-toc-heading-grep&quot;&gt;grep&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;heading-20200120-26&quot;&gt;2020/01/20-26&lt;/h1&gt;

&lt;p&gt;This week I finished the draft implementation of Processing Element with partly verification. Now it works on most situations.&lt;/p&gt;

&lt;p&gt;During the implementation, I found most of the time was cost on some logic details. And with the growth of the circuit scale, it can be more difficult for me to figure out which part of the logic causes the bug. That means I am supposed to work out not only the architecture of this module but also a more detailed implementation.&lt;/p&gt;

&lt;p&gt;So next week, I will try to work out the basic architecture of clusters.&lt;/p&gt;

&lt;h2 id=&quot;heading-scala--chisel-syntax&quot;&gt;Scala &amp;amp; Chisel Syntax&lt;/h2&gt;

&lt;h3 id=&quot;heading-scala-patton-match&quot;&gt;Scala Patton Match&lt;/h3&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	 &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;matchTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;matchTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;matchTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;matchTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

	 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	 &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;matchTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;one&quot;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;two&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;scala.Int&quot;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;many&quot;&lt;/span&gt;
	 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;heading-grep&quot;&gt;grep&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /home/singularity/dl_accelerator/test_run_dir/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; | &lt;span class=&quot;se&quot;&gt;\g&lt;/span&gt;rep &lt;span class=&quot;s2&quot;&gt;&quot;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\w\+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.fir&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>SingularityKChen</name></author><category term="WeeklyReview" /><category term="scala" /><category term="RegularExpression" /><summary type="html">There is no thing to show~</summary></entry><entry><title type="html">2020/01/13-19 weekly review</title><link href="http://localhost:4000/blog/2020/01/19/2020-01-13-19-weekly-review/" rel="alternate" type="text/html" title="2020/01/13-19 weekly review" /><published>2020-01-19T00:00:00+08:00</published><updated>2020-01-19T00:00:00+08:00</updated><id>http://localhost:4000/blog/2020/01/19/2020-01-13-19-weekly-review</id><content type="html" xml:base="http://localhost:4000/blog/2020/01/19/2020-01-13-19-weekly-review/">&lt;ul class=&quot;toc&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-20200113-19&quot; id=&quot;markdown-toc-heading-20200113-19&quot;&gt;2020/01/13-19&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-eyeriss-v2-a-flexible-accelerator-for-emerging-deep-neural-networks-on-mobile-devices&quot; id=&quot;markdown-toc-heading-eyeriss-v2-a-flexible-accelerator-for-emerging-deep-neural-networks-on-mobile-devices&quot;&gt;Eyeriss v2: A Flexible Accelerator for Emerging Deep Neural Networks on Mobile Devices&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-hierarchical-architecture-of-eyeriss&quot; id=&quot;markdown-toc-heading-hierarchical-architecture-of-eyeriss&quot;&gt;Hierarchical Architecture of Eyeriss&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-chisel-syntax&quot; id=&quot;markdown-toc-heading-chisel-syntax&quot;&gt;Chisel Syntax&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-mac-module-delay&quot; id=&quot;markdown-toc-heading-mac-module-delay&quot;&gt;MAC module Delay&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-mem-read-test&quot; id=&quot;markdown-toc-heading-mem-read-test&quot;&gt;MEM Read Test&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-reading-after-reading-from-another-mem&quot; id=&quot;markdown-toc-heading-reading-after-reading-from-another-mem&quot;&gt;Reading After Reading From Another Mem&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-read-part-of-uint&quot; id=&quot;markdown-toc-heading-read-part-of-uint&quot;&gt;Read Part of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UInt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-combine-two-integers-as-bits&quot; id=&quot;markdown-toc-heading-combine-two-integers-as-bits&quot;&gt;Combine Two Integers as Bits&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;heading-20200113-19&quot;&gt;2020/01/13-19&lt;/h1&gt;

&lt;p&gt;This week I read &lt;a href=&quot;#eyeriss-v2-a-flexible-accelerator-for-emerging-deep-neural-networks-on-mobile-devices&quot;&gt;another paper of Eyeriss v2&lt;/a&gt; and found the new PE architecture it uses. So I changed the design to fit this new one. And because of the complexity of CSC coding format it uses, I spent almost two days to work out the read control logic of CSC hence no time for the software analysis system. And today I thought out a more hardware-friendly CSC format, and I will work on it. Currently, this PE project has passed two basic reads and write tests.&lt;/p&gt;

&lt;p&gt;Next week, I have to finish the PE with a test file, and then try to establish the software analysis system.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading-eyeriss-v2-a-flexible-accelerator-for-emerging-deep-neural-networks-on-mobile-devices&quot;&gt;Eyeriss v2: A Flexible Accelerator for Emerging Deep Neural Networks on Mobile Devices&lt;/h2&gt;

&lt;h3 id=&quot;heading-hierarchical-architecture-of-eyeriss&quot;&gt;Hierarchical Architecture of Eyeriss&lt;/h3&gt;

&lt;h4 id=&quot;heading-top-level&quot;&gt;Top Level&lt;/h4&gt;

&lt;p&gt;The PEs and GLBs are grouped into clusters to support a flexible on-chip network (NoC) that connects the GLBs to the PEs at low cost.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/GfZZt2o1Omo0Px4X/image.png&quot; alt=&quot;Eyeriss v2 top-level architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/rdHBVt49L3Ukg9eb/image.png&quot; alt=&quot;the components in the architecture&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;heading-hierarchical-mesh-network-hm-noc&quot;&gt;Hierarchical Mesh Network (HM-NoC)&lt;/h4&gt;

&lt;p&gt;The HM-NoC can be configured into four different modes depending on the data reuse opportunity and bandwidth requirements.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In the high bandwidth mode, each GLB bank or off-chip data I/O can deliver data independently to the PEs in the cluster, which achieves unicast.&lt;/li&gt;
  &lt;li&gt;In the high reuse mode, data from the same source can be routed to all PEs in different clusters, which achieves broadcast.&lt;/li&gt;
  &lt;li&gt;For situations where the data reuse cannot fully utilize the entire PE array with broadcast, different multicast modes, specifically grouped-multicast and interleaved multicast, can be adapted according to the desired multicast patterns.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/2eS389Ug4u84Mujp/image.png&quot; alt=&quot;Hierarchical mesh network for input activations. This only shows the top 2×2 of the entire 8×2 cluster array&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/CWvcp5kSbPMpEQEx/image.png&quot; alt=&quot;Hierarchical mesh network for weights. This only shows the top 2×2 of the entire 8×2 cluster array&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/HdYFi0MzVIgkyYm0/image.png&quot; alt=&quot;Hierarchical mesh network for psums. This only shows a 2×2 portion of the entire 8×2 cluster array&quot; /&gt;&lt;/p&gt;

&lt;p&gt;HM-NoC adapts different modes for different types of layers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Conventional CONV layers: In normal CONV layers, there is plenty of data reuse for both iacts and weights. To keep all 4 PEs busy at the lowest bandwidth requirement, we need 2 iacts and 2 weights from the data source (ignoring the reuse from SPad). In this case, either the HM-NoC for iact or weight has to be configured into the grouped-multicast mode, while the other one configured into the interleaved-multicast mode.&lt;/li&gt;
  &lt;li&gt;Depth-wise (DP) CONV layers: For DP CONV layers, there can be nearly no reuse for iacts due to the lack of output channels. Therefore, we can only exploit the reuse of weights by broadcasting the weights to all PEs while fetching unique iacts for each PE.&lt;/li&gt;
  &lt;li&gt;Fully-connected (FC) layers: Contrary to the DP CONV layers, FC layers usually see little reuse for weights, especially when the batch size is limited. In this case, the modes of iact and weight NoCs are swapped from the previous one: the weights are now unicast to the PEs while the iacts are broadcast to all PEs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;heading-eyeriss-v2-pe-architecture&quot;&gt;Eyeriss v2 PE Architecture&lt;/h4&gt;

&lt;p&gt;To handle these dependencies while still maintaining throughput, the PE is implemented using seven pipeline stages and five SPads:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The first two pipeline stages are responsible for fetching non-zero iacts from the SPads.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;After a non-zero iact is fetched, the next three pipeline stages read the corresponding weights.&lt;/li&gt;
  &lt;li&gt;The final two stages in the pipeline perform the MAC computation on the fetched non-zero iact and weight and then send the updated psum either back to the psum SPad or out of the PE.&lt;/li&gt;
  &lt;li&gt;The iact address SPad stores the address vector of the CSC compressed iacts, which is used to address the reads from the iact data SPad that holds the non-zero data vector as well as the count vector.&lt;/li&gt;
  &lt;li&gt;There is a weight address SPad to address the reads from the weight data SPad for the correct column of weights.&lt;/li&gt;
  &lt;li&gt;There is a psum SPad&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/Zj7Aa6YzIis6Fhxs/image.png&quot; alt=&quot;Eyeriss v2 PE Architecture. The address SPad for both iact and weight are used to store address vector in the CSC compressed data, while the data SPad stores the data and count vectors&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And this is the data format this architecture uses. But I will use a more simple one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/dwf3TL2QC4EdrmXJ/image.png&quot; alt=&quot;Example of compressing sparse weights with compressed sparse column (CSC) coding&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;data&lt;/th&gt;
      &lt;th&gt;row&lt;/th&gt;
      &lt;th&gt;col&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;b&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;c&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;d&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;e&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;f&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;g&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;h&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;i&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;j&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;k&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;l&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;heading-chisel-syntax&quot;&gt;Chisel Syntax&lt;/h2&gt;

&lt;h3 id=&quot;heading-mac-module-delay&quot;&gt;MAC module Delay&lt;/h3&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TheMACModule&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Module&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;out_reg0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;out_reg1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;out_reg2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;

				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a_reg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b_reg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;a_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;b&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;b_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;c&lt;/span&gt;
		
				&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;out_reg0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;c&lt;/span&gt;
				&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;out_reg1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;c&lt;/span&gt;
				&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;out_reg2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_reg&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyMACTester&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TheMACModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PeekPokeTester&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in_a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in_b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in_c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;poke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;poke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;poke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clock 0, out_reg0 = ${peek(c.io.out_reg0)}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;         out_reg1 = ${peek(c.io.out_reg1)}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;         out_reg2 = ${peek(c.io.out_reg2)}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clock 1, out_reg0 = ${peek(c.io.out_reg0)}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;         out_reg1 = ${peek(c.io.out_reg1)}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;         out_reg2 = ${peek(c.io.out_reg2)}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clock 2, out_reg0 = ${peek(c.io.out_reg0)}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;         out_reg1 = ${peek(c.io.out_reg1)}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;         out_reg2 = ${peek(c.io.out_reg2)}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TheMACModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyMACTester&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[info] [0.007] clock 0, out_reg0 = 10 // without pipe
[info] [0.007]          out_reg1 = 4
[info] [0.008]          out_reg2 = 0
[info] [0.009] clock 1, out_reg0 = 10
[info] [0.010]          out_reg1 = 10 // two stages pipe
[info] [0.010]          out_reg2 = 4
[info] [0.012] clock 2, out_reg0 = 10
[info] [0.012]          out_reg1 = 10
[info] [0.013]          out_reg2 = 10 // three stages pipe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;heading-mem-read-test&quot;&gt;MEM Read Test&lt;/h3&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TheMACModule&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Module&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;r_or_w&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rst&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;//val r_after_w  = Input(Bool())
&lt;/span&gt;				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in_vec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;out_vec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;

				&lt;span class=&quot;cm&quot;&gt;/*val a_reg = RegInit(0.U(4.W))
				val b_reg = RegInit(0.U(4.W))*/&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sram_te&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SyncReadMem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mem_te&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;reg_te&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;VecInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;wire_vec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Wire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
								&lt;span class=&quot;nf&quot;&gt;wire_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sram_te&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
								&lt;span class=&quot;nf&quot;&gt;wire_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mem_te&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
								&lt;span class=&quot;nf&quot;&gt;wire_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reg_te&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				
				&lt;span class=&quot;nf&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r_or_w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
								&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
												&lt;span class=&quot;nv&quot;&gt;sram_te&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;in_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
												&lt;span class=&quot;nv&quot;&gt;mem_te&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;in_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
												&lt;span class=&quot;nf&quot;&gt;reg_te&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;in_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
								&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
								&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
												&lt;span class=&quot;nv&quot;&gt;sram_te&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
												&lt;span class=&quot;nv&quot;&gt;mem_te&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
												&lt;span class=&quot;nf&quot;&gt;reg_te&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;
								&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;out_vec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wire_vec&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyMACTester&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TheMACModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PeekPokeTester&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in_a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in_b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in_c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cyclen&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
								&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;------- cycle ${cyclen} ---------&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
								&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
												&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;    out_vec(${i}) = ${peek(c.io.out_vec(i))}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
								&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
								&lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;B&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				
				&lt;span class=&quot;nf&quot;&gt;poke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// reset the memory
&lt;/span&gt;				&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;------ write begin ------&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;poke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r_or_w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;poke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;//poke(c.io.r_after_w, false.B)
&lt;/span&gt;				&lt;span class=&quot;nf&quot;&gt;poke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;in_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;poke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;in_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;poke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;in_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				
				&lt;span class=&quot;nf&quot;&gt;print_out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;print_out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;------ read begin -------&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				
				&lt;span class=&quot;nf&quot;&gt;poke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r_or_w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				
				&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
								&lt;span class=&quot;nf&quot;&gt;print_out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
								&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TheMACModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyMACTester&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[info] [0.003] ------ write begin ------
[info] [0.003] ------- cycle 1 ---------
[info] [0.007]     out_vec(0) = 0
[info] [0.008]     out_vec(1) = 0
[info] [0.008]     out_vec(2) = 0
[info] [0.008]     out_vec(3) = 0
[info] [0.009]     out_vec(4) = 0
[info] [0.009]     out_vec(5) = 0
[info] [0.009]     out_vec(6) = 0
[info] [0.009]     out_vec(7) = 0
[info] [0.010]     out_vec(8) = 0
[info] [0.012] ------ read begin -------
[info] [0.013] ------- cycle 2 ---------
[info] [0.015]     out_vec(0) = 0
[info] [0.016]     out_vec(1) = 0
[info] [0.016]     out_vec(2) = 0
[info] [0.018]     out_vec(3) = 2 // Mem can read
[info] [0.018]     out_vec(4) = 3 // with a cycle
[info] [0.018]     out_vec(5) = 4
[info] [0.018]     out_vec(6) = 2 // Reg file is
[info] [0.018]     out_vec(7) = 3 // the same as
[info] [0.018]     out_vec(8) = 4 // Mem
[info] [0.020] ------- cycle 3 ---------
[info] [0.020]     out_vec(0) = 2 // Sram has to
[info] [0.020]     out_vec(1) = 3 // wait a cycle
[info] [0.020]     out_vec(2) = 4
[info] [0.020]     out_vec(3) = 2
[info] [0.020]     out_vec(4) = 3
[info] [0.020]     out_vec(5) = 4
[info] [0.020]     out_vec(6) = 2
[info] [0.020]     out_vec(7) = 3
[info] [0.020]     out_vec(8) = 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So We'd better use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mux&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;wire_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r_or_w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sram_te&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;wire_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r_or_w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mem_te&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;wire_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r_or_w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reg_te&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r_or_w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
								&lt;span class=&quot;nv&quot;&gt;sram_te&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;in_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
								&lt;span class=&quot;nv&quot;&gt;mem_te&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;in_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
								&lt;span class=&quot;nf&quot;&gt;reg_te&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;in_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[info] [0.002] ------ write begin ------
[info] [0.003] ------- cycle 1 ---------
[info] [0.004]     out_vec(0) = 0
[info] [0.004]     out_vec(1) = 0
[info] [0.004]     out_vec(2) = 0
[info] [0.004]     out_vec(3) = 0
[info] [0.004]     out_vec(4) = 0
[info] [0.005]     out_vec(5) = 0
[info] [0.005]     out_vec(6) = 0
[info] [0.005]     out_vec(7) = 0
[info] [0.005]     out_vec(8) = 0
[info] [0.005] ------- cycle 2 ---------
[info] [0.006]     out_vec(0) = 0
[info] [0.006]     out_vec(1) = 0
[info] [0.006]     out_vec(2) = 0
[info] [0.006]     out_vec(3) = 0
[info] [0.006]     out_vec(4) = 0
[info] [0.006]     out_vec(5) = 0
[info] [0.006]     out_vec(6) = 0
[info] [0.006]     out_vec(7) = 0
[info] [0.006]     out_vec(8) = 0
[info] [0.010] ------- cycle 3 ---------
[info] [0.013]     out_vec(0) = 0
[info] [0.016]     out_vec(1) = 0
[info] [0.028]     out_vec(2) = 0
[info] [0.040]     out_vec(3) = 0
[info] [0.045]     out_vec(4) = 0
[info] [0.047]     out_vec(5) = 0
[info] [0.052]     out_vec(6) = 0
[info] [0.054]     out_vec(7) = 0
[info] [0.056]     out_vec(8) = 0
[info] [0.059] ------ read begin -------
[info] [0.060] ------- cycle 4 ---------
[info] [0.062]     out_vec(0) = 14
[info] [0.063]     out_vec(1) = 7
[info] [0.070]     out_vec(2) = 9
[info] [0.080]     out_vec(3) = 2
[info] [0.086]     out_vec(4) = 3
[info] [0.087]     out_vec(5) = 4
[info] [0.088]     out_vec(6) = 2
[info] [0.090]     out_vec(7) = 3
[info] [0.095]     out_vec(8) = 4
[info] [0.099] ------- cycle 5 ---------
[info] [0.102]     out_vec(0) = 2
[info] [0.108]     out_vec(1) = 3
[info] [0.108]     out_vec(2) = 4
[info] [0.111]     out_vec(3) = 2
[info] [0.113]     out_vec(4) = 3
[info] [0.114]     out_vec(5) = 4
[info] [0.120]     out_vec(6) = 2
[info] [0.121]     out_vec(7) = 3
[info] [0.127]     out_vec(8) = 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;heading-reading-after-reading-from-another-mem&quot;&gt;Reading After Reading From Another Mem&lt;/h3&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TheMACModule&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Module&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;r_or_w&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rst&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in_vec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;out_vec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;

				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sram_te&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SyncReadMem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;reg_te&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;VecInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;wire_vec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Wire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
								&lt;span class=&quot;nf&quot;&gt;wire_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r_or_w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sram_te&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wire_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
								&lt;span class=&quot;c1&quot;&gt;//wire_vec(i) := Mux(false.B, sram_te.read(wire_vec(i+3)), 0.U)
&lt;/span&gt;								&lt;span class=&quot;nf&quot;&gt;wire_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r_or_w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reg_te&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				
				&lt;span class=&quot;nf&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r_or_w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
								&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
												&lt;span class=&quot;nv&quot;&gt;sram_te&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;in_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
												&lt;span class=&quot;nf&quot;&gt;reg_te&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;in_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
								&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
								&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
												&lt;span class=&quot;nv&quot;&gt;sram_te&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
												&lt;span class=&quot;nf&quot;&gt;reg_te&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;
								&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
								&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;out_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wire_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyMACTester&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TheMACModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PeekPokeTester&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in_a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in_b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in_c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
				
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in_d&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in_e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in_f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cyclen&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
								&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;------- cycle ${cyclen} ---------&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
								&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
												&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;    out_vec(${i}) = ${peek(c.io.out_vec(i))}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
								&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
								&lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;B&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				
				&lt;span class=&quot;nf&quot;&gt;poke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;------ write begin ------&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;poke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r_or_w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;poke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;poke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;in_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;poke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;in_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;poke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;in_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;poke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;in_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;poke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;in_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;poke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;in_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				
				&lt;span class=&quot;nf&quot;&gt;print_out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;print_out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;print_out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;------ read begin -------&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				
				&lt;span class=&quot;nf&quot;&gt;poke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r_or_w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				
				&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
								&lt;span class=&quot;nf&quot;&gt;print_out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
								&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TheMACModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyMACTester&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[info] [0.001] ------ write begin ------
[info] [0.001] ------- cycle 1 ---------
[info] [0.002]     out_vec(0) = 0
[info] [0.002]     out_vec(1) = 0
[info] [0.002]     out_vec(2) = 0
[info] [0.003]     out_vec(3) = 0
[info] [0.003]     out_vec(4) = 0
[info] [0.003]     out_vec(5) = 0
[info] [0.003] ------- cycle 2 ---------
[info] [0.003]     out_vec(0) = 0
[info] [0.004]     out_vec(1) = 0
[info] [0.004]     out_vec(2) = 0
[info] [0.004]     out_vec(3) = 0
[info] [0.004]     out_vec(4) = 0
[info] [0.004]     out_vec(5) = 0
[info] [0.004] ------- cycle 3 ---------
[info] [0.004]     out_vec(0) = 0
[info] [0.004]     out_vec(1) = 0
[info] [0.005]     out_vec(2) = 0
[info] [0.005]     out_vec(3) = 0
[info] [0.005]     out_vec(4) = 0
[info] [0.009]     out_vec(5) = 0
[info] [0.018] ------ read begin -------
[info] [0.018] ------- cycle 4 ---------
[info] [0.021]     out_vec(0) = 5
[info] [0.022]     out_vec(1) = 5
[info] [0.023]     out_vec(2) = 5
[info] [0.024]     out_vec(3) = 0 // get address
[info] [0.026]     out_vec(4) = 1
[info] [0.034]     out_vec(5) = 2
[info] [0.036] ------- cycle 5 ---------
[info] [0.036]     out_vec(0) = 5 // get the data
[info] [0.037]     out_vec(1) = 7
[info] [0.037]     out_vec(2) = 9
[info] [0.038]     out_vec(3) = 0
[info] [0.039]     out_vec(4) = 1
[info] [0.044]     out_vec(5) = 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegNext&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mux&lt;/code&gt; for SRAM read, then it will be better:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;wire_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r_or_w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sram_te&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wire_vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[info] [0.045] ------ read begin -------
[info] [0.049] ------- cycle 4 ---------
[info] [0.050]     out_vec(0) = 0
[info] [0.050]     out_vec(1) = 0
[info] [0.050]     out_vec(2) = 0
[info] [0.051]     out_vec(3) = 2
[info] [0.055]     out_vec(4) = 1
[info] [0.055]     out_vec(5) = 0
[info] [0.057] ------- cycle 5 ---------
[info] [0.057]     out_vec(0) = 9
[info] [0.058]     out_vec(1) = 7
[info] [0.059]     out_vec(2) = 5
[info] [0.059]     out_vec(3) = 2
[info] [0.060]     out_vec(4) = 1
[info] [0.069]     out_vec(5) = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;But it is not friendly to data write!&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;heading-read-part-of-uint&quot;&gt;Read Part of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UInt&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;		&lt;span class=&quot;c1&quot;&gt;// Example
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;U&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;vec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;toBools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$vec&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Vec(0, 0, 1, 1)
&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Test
&lt;/span&gt;		&lt;span class=&quot;nf&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Example
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;vec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;asUInt&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$uint&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 13
&lt;/span&gt;		
		&lt;span class=&quot;cm&quot;&gt;/* Test
		 *
		 * (remember leftmost Bool in Vec is low order bit)
		 */&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;iactDataCountVec&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;iactDataSPad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;commonIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;readOutData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;toBools&lt;/span&gt;
				&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;iactMatrixData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iactDataCountVec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;asUInt&lt;/span&gt;
				&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;iactMatrixRow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iactDataCountVec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;takeRight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;asUInt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;heading-combine-two-integers-as-bits&quot;&gt;Combine Two Integers as Bits&lt;/h3&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inDataWithIndex&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;zipWithIndex&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toBinary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
		 &lt;span class=&quot;nv&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;toBinaryString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inDataCountBinary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inDataWithIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toBinary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toBinary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inDataCountDec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inDataCountBinary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inDataCountDec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;indices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inDataCountDec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inDataCountBinary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>SingularityKChen</name></author><category term="WeeklyReview" /><category term="EyerissV2" /><category term="HM-NoC" /><category term="Chisel" /><summary type="html">There is no thing to show~</summary></entry><entry><title type="html">2020/01/06-12 weekly review</title><link href="http://localhost:4000/blog/2020/01/12/2020-01-06-12-weekly-review/" rel="alternate" type="text/html" title="2020/01/06-12 weekly review" /><published>2020-01-12T00:00:00+08:00</published><updated>2020-01-12T00:00:00+08:00</updated><id>http://localhost:4000/blog/2020/01/12/2020-01-06-12-weekly-review</id><content type="html" xml:base="http://localhost:4000/blog/2020/01/12/2020-01-06-12-weekly-review/">&lt;ul class=&quot;toc&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-20200106-12&quot; id=&quot;markdown-toc-heading-20200106-12&quot;&gt;2020/01/06-12&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-eie-efficient-inference-engine-on-compressed-deep-neural-network&quot; id=&quot;markdown-toc-heading-eie-efficient-inference-engine-on-compressed-deep-neural-network&quot;&gt;EIE: Efficient Inference Engine on Compressed Deep Neural Network&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-exploit-the-sparsity-of-activations-with-compressed-sparse-column-csc-format&quot; id=&quot;markdown-toc-heading-exploit-the-sparsity-of-activations-with-compressed-sparse-column-csc-format&quot;&gt;Exploit the Sparsity of Activations with Compressed Sparse Column (CSC) Format&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-parallelizing-compressed-dnn&quot; id=&quot;markdown-toc-heading-parallelizing-compressed-dnn&quot;&gt;Parallelizing Compressed DNN&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-hardware-implementation&quot; id=&quot;markdown-toc-heading-hardware-implementation&quot;&gt;Hardware Implementation&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-design-space-exploration&quot; id=&quot;markdown-toc-heading-design-space-exploration&quot;&gt;Design Space Exploration&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-proxylessnas-direct-neural-architecture-search-on-target-task-and-hardware&quot; id=&quot;markdown-toc-heading-proxylessnas-direct-neural-architecture-search-on-target-task-and-hardware&quot;&gt;ProxylessNAS: Direct Neural Architecture Search on Target Task and Hardware&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-method&quot; id=&quot;markdown-toc-heading-method&quot;&gt;Method&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-make-latency-differentiable&quot; id=&quot;markdown-toc-heading-make-latency-differentiable&quot;&gt;Make Latency Differentiable&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-design-automation-for-efficient-deep-learning-computing&quot; id=&quot;markdown-toc-heading-design-automation-for-efficient-deep-learning-computing&quot;&gt;Design Automation for Efficient Deep Learning Computing&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-automated-model-specialization&quot; id=&quot;markdown-toc-heading-automated-model-specialization&quot;&gt;Automated Model Specialization&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-automated-channel-pruning&quot; id=&quot;markdown-toc-heading-automated-channel-pruning&quot;&gt;Automated Channel Pruning&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-automated-mixed-precision-quantization&quot; id=&quot;markdown-toc-heading-automated-mixed-precision-quantization&quot;&gt;Automated Mixed-Precision Quantization&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-learning-to-design-circuits&quot; id=&quot;markdown-toc-heading-learning-to-design-circuits&quot;&gt;Learning to Design Circuits&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-chisel--scala-syntax&quot; id=&quot;markdown-toc-heading-chisel--scala-syntax&quot;&gt;Chisel &amp;amp; Scala Syntax&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-chiselqueue&quot; id=&quot;markdown-toc-heading-chiselqueue&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chisel.Queue&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-chiseldecoupled&quot; id=&quot;markdown-toc-heading-chiseldecoupled&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chisel.Decoupled&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-chiselsuggestname&quot; id=&quot;markdown-toc-heading-chiselsuggestname&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chisel.suggestName&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-chiselprint&quot; id=&quot;markdown-toc-heading-chiselprint&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chisel.print&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-scalazip&quot; id=&quot;markdown-toc-heading-scalazip&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scala.zip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-scalamap&quot; id=&quot;markdown-toc-heading-scalamap&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scala.map&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-scalareduce-reduceleft--reduceright&quot; id=&quot;markdown-toc-heading-scalareduce-reduceleft--reduceright&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scala.reduce&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduceLeft&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduceRight&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-scalalisttakeint&quot; id=&quot;markdown-toc-heading-scalalisttakeint&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scala.List.take(Int)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-reg-delay-test&quot; id=&quot;markdown-toc-heading-reg-delay-test&quot;&gt;Reg Delay Test&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;heading-20200106-12&quot;&gt;2020/01/06-12&lt;/h1&gt;

&lt;p&gt;This week I read several papers written by Song Han including &lt;a href=&quot;https://github.com/SingularityKChen/Weekly_Review_in_NTU/blob/master/Reference.md&quot;&gt;reference&lt;/a&gt; 12, 15-17, related to both deep learning accelerator architecture with Weight stationery and design automation for Neural Architecture Search.&lt;/p&gt;

&lt;p&gt;Also, I began the implementation of &lt;a href=&quot;https://github.com/SingularityKChen/dl_accelerator&quot;&gt;Processing Element&lt;/a&gt;, and finished the main function without any test.&lt;/p&gt;

&lt;p&gt;So next week, I plan to finish the PE with a test file and then establish the analysis system based on &lt;a href=&quot;#eyexam&quot;&gt;Eyexam&lt;/a&gt; with some scripts to compute the details of the hardware. So I need to re-read the papers related to &lt;a href=&quot;#20191223-29&quot;&gt;Eyeriss&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading-eie-efficient-inference-engine-on-compressed-deep-neural-network&quot;&gt;EIE: Efficient Inference Engine on Compressed Deep Neural Network&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/7hWMl33GZigEvWNW/image.png&quot; alt=&quot;Efficient inference engine that works on the compressed deep neural network model&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;heading-exploit-the-sparsity-of-activations-with-compressed-sparse-column-csc-format&quot;&gt;Exploit the Sparsity of Activations with Compressed Sparse Column (CSC) Format&lt;/h3&gt;

&lt;p&gt;For each column $W_j$ of the matrix $W$ we store a vector $v$ that contains the non-zero weights, and a second, equal-length vector $z$ that encodes the number of zeros before the corresponding entry in $v$. Each entry of  $v$ and $z$ is represented by a four-bit value. If more than 15 zeros appear
before a non-zero entry we add a zero in vector $v$.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/2LMlD7Bu84UsueOG/image.png&quot; alt=&quot;Memory layout for the relative indexed&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;heading-parallelizing-compressed-dnn&quot;&gt;Parallelizing Compressed DNN&lt;/h3&gt;

&lt;p&gt;perform the sparse matrix sparse vector operation by scanning vector $a$ to find its next non-zero value  $a_j$and broadcasting $a_j$ along with its index $j$ to all PEs. Each PE then multiplies $a_j$ by the non-zero elements in its portion of column $W_j$ — accumulating the partial sums in accumulators for each element of the output activation vector b. In the CSC representation, these non-zeros weights are stored contiguously so each PE simply walks through its $v$ array from location $p_j$ to $p_{j+1}-1$ to load the weights. To address the output accumulators, the row number $i$ corresponding to each weight $W_{ij}$ is generated by keeping a running sum of the entries of the x array.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/8Y6M5PoCqV01NZdy/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The interleaved CSC representation allows each PE to quickly find the non-zeros in each column to be multiplied by $a_j$. This organization also keeps all of the computation except for the broadcast of the input activations local to a PE.&lt;/p&gt;

&lt;h3 id=&quot;heading-hardware-implementation&quot;&gt;Hardware Implementation&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/Nr3mEv6LW0Y31KxB/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Activation Queue and Load Balancing: The broadcast is disabled if any PE has a full queue. At any point in time, each PE processes the activation at the head of its queue.&lt;/li&gt;
  &lt;li&gt;Pointer Read Unit: $p_j$ and $p_{j+1}$ will always be in different banks.&lt;/li&gt;
  &lt;li&gt;Sparse Matrix Read Unit: uses pointers $p_j$ and $p_{j+1}$ to read the non-zero elements&lt;/li&gt;
  &lt;li&gt;Arithmetic Unit: performs the multiply-accumulate operation&lt;/li&gt;
  &lt;li&gt;Activation Read/Write: contains two activation register files that accommodate the source and destination activation values respectively during a single round of FC layer computation&lt;/li&gt;
  &lt;li&gt;Distributed Leading Non-Zero Detection: select the first non-zero result. The result is sent to a Leading Nonzero Detection Node (LNZD Node)&lt;/li&gt;
  &lt;li&gt;Central Control Unit: It communicates with the master and monitors the state of every PE by setting the control registers. There are two modes in the Central Unit: I/O and Computing.
    &lt;ul&gt;
      &lt;li&gt;In the I/O mode, all of the PEs are idle while the activations and weights in every PE can be accessed by a DMA connected with the Central Unit. This is a one-time cost.
        &lt;ul&gt;
          &lt;li&gt;In the Computing mode, the CCU repeatedly collects a non-zero value from the LNZD quadtree and broadcasts this value to all PEs.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;brought the critical path delay down to 1.15ns by introducing 4 pipeline stages to update one activation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;codebook lookup and address accumulation (in parallel)&lt;/li&gt;
  &lt;li&gt;output activation read and input activation multiply (in parallel)&lt;/li&gt;
  &lt;li&gt;shift and add&lt;/li&gt;
  &lt;li&gt;output activation write.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;heading-design-space-exploration&quot;&gt;Design Space Exploration&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Queue Depth&lt;/strong&gt;. The activation FIFO queue deals with load imbalance between the PEs. A deeper FIFO queue can better decouple producer and consumer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SRAM Width&lt;/strong&gt;. We choose an SRAM with a 64-bit interface to store the sparse matrix (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spmat&lt;/code&gt;) since it minimized the total energy. Wider SRAM interfaces reduce the number of total SRAM accesses but increase the energy cost per SRAM read.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Arithmetic Precision&lt;/strong&gt;. We use a 16-bit fixed-point arithmetic. 16-bit fixed-point multiplication consumes 5 times less energy than 32-bit fixed-point and 6.2 times less energy than 32-bit floating-point.&lt;/p&gt;

&lt;h2 id=&quot;heading-proxylessnas-direct-neural-architecture-search-on-target-task-and-hardware&quot;&gt;ProxylessNAS: Direct Neural Architecture Search on Target Task and Hardware&lt;/h2&gt;

&lt;p&gt;ProxylessNAS is the first NAS algorithm that directly learns architectures on the largescale dataset (e.g. ImageNet) without any proxy while still allowing a large candidate set and removing the restriction of repeating blocks. it is the first work to study specialized neural network architectures for different hardware architectures.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/qiQowKgCctgUyfLd/image.png&quot; alt=&quot;optimizes neural network architectures&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;heading-method&quot;&gt;Method&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;describe the construction of the over-parameterized network with all candidate paths&lt;/li&gt;
  &lt;li&gt;introduce how we leverage binarized architecture parameters to reduce the memory consumption of training the over-parameterized network to the same level as regular training.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/GtQyHdVEM7UiZmh7/image.png&quot; alt=&quot;Learning both weight parameters and binarized architecture parameters&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;first freeze the architecture parameters and stochastically sample binary gates according to Eq. (2) for each batch of input data&lt;/li&gt;
  &lt;li&gt;the weight parameters of active paths are updated via standard gradient descent on the training set (Figure 2 left)&lt;/li&gt;
  &lt;li&gt;When training architecture parameters, the weight parameters are frozen&lt;/li&gt;
  &lt;li&gt;reset the binary gates and update the architecture parameters on the validation set (Figure 2 right). These two update steps are performed in an alternative manner.&lt;/li&gt;
  &lt;li&gt;derive the compact architecture by pruning redundant paths&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;heading-make-latency-differentiable&quot;&gt;Make Latency Differentiable&lt;/h3&gt;

&lt;p&gt;Model the latency of a network as a continuous function of the neural network dimensions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/4wwTe3kgMO4AJleJ/image.png&quot; alt=&quot;Making latency differentiable by introducing latency regularization loss&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;heading-design-automation-for-efficient-deep-learning-computing&quot;&gt;Design Automation for Efficient Deep Learning Computing&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/anETjNuh440NbKou/image.png&quot; alt=&quot;Design automation for model specialization, channel pruning and mixed-precision quantization&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Three main points in this paper:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;automatically designing specialized fast models&lt;/li&gt;
  &lt;li&gt;auto channel pruning&lt;/li&gt;
  &lt;li&gt;auto mixed-precision quantization&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;heading-automated-model-specialization&quot;&gt;Automated Model Specialization&lt;/h3&gt;

&lt;p&gt;To fully utilize the hardware resource, start with a large design space (Figure 1(a)) that includes many candidate paths to learn which is the best one by gradient descent, rather than hand-picking with rule-based heuristics.&lt;/p&gt;

&lt;p&gt;The search space for each block $i$ consists of many choices:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConvOp&lt;/code&gt;: mobile inverted bottleneck conv [9] with various kernel sizes and expansion ratios
    &lt;ul&gt;
      &lt;li&gt;Kernel size: {3*3, 5*5, 7*7}
        &lt;ul&gt;
          &lt;li&gt;Expansion ratio: {3, 6}&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZeroOp&lt;/code&gt;: if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZeroOp&lt;/code&gt; is chosen at $i^{th}$ block, it means the block is skipped.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the forward step, to save GPU memory, we allow only one candidate path to actively reside in the GPU memory. This is achieved by hard-thresholding the probability of each candidate path to either 0 or 1 (i.e., path-level binarization).&lt;/p&gt;

&lt;h3 id=&quot;heading-automated-channel-pruning&quot;&gt;Automated Channel Pruning&lt;/h3&gt;

&lt;p&gt;Pruning too much will hurt accuracy; too less will not achieve high compression ratio.&lt;/p&gt;

&lt;p&gt;Our automatic model compression (AMC) leverages reinforcement learning to efficiently search the pruning ratio.&lt;/p&gt;

&lt;p&gt;We train a reinforcement learning agent to predict the best sparsity for a given hardware. We evaluate the accuracy and FLOPs after pruning. Then we update the agent by encouraging smaller, faster and more accurate models.&lt;/p&gt;

&lt;p&gt;The easiest way to reduce the channels of a model is to use uniform channel shrinkage, i.e. use a width multiplier to uniformly reduce the channels of each layer with a fixed ratio.&lt;/p&gt;

&lt;h3 id=&quot;heading-automated-mixed-precision-quantization&quot;&gt;Automated Mixed-Precision Quantization&lt;/h3&gt;

&lt;p&gt;Our hardware-aware automatic quantization (HAQ) models the quantization task as a reinforcement learning problem. We use the actor-critic model to give the quantization policy (#bits per layer) (Figure 1(c)). The goal is not only high accuracy but also low energy and low latency.&lt;/p&gt;

&lt;p&gt;Inferencing on edge devices and cloud servers can be quite different, since:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the batch size on the cloud servers are larger&lt;/li&gt;
  &lt;li&gt;the edge devices are usually limited to low computation resources and memory bandwidth.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Interpret the quantization policy’s difference between edge and cloud by the roofline model.&lt;/p&gt;

&lt;h2 id=&quot;heading-learning-to-design-circuits&quot;&gt;Learning to Design Circuits&lt;/h2&gt;

&lt;p&gt;Two difficult for searching for parameters that satisfy circuit specifications due to the low availability of training data:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Circuit simulation is slow, thus generating large-scale dataset is time-consuming&lt;/li&gt;
  &lt;li&gt;Most circuit designs are propitiatory IPs within individual IC companies, making it expensive to collect large-scale datasets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Constrains for L2DC(Learning to Design Circuits):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;meet hard-constraints (eg. gain, bandwidth)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;optimize good-to-have targets (eg. area, power)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/DygvZ9uF87sLxhUy/image.png&quot; alt=&quot;Learning to Design Circuits (L2DC) Method Overview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;leverages reinforcement learning (RL) to generate circuits data by itself and learns from the data to search for best parameters.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;produces an action (a set of parameters) to the circuit simulator environment, and then receives a reward as a function of gain, bandwidth, power, area, etc.&lt;/li&gt;
  &lt;li&gt;The reward is defined to optimize the desired Figures of Merits (FOM) composed of several performance metrics.&lt;/li&gt;
  &lt;li&gt;By maximizing the reward, RL agent can optimize the circuit parameters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/AY5WaAFy94ct6a5z/image.png&quot; alt=&quot;use sequence to sequence model to generate circuit parameters&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;heading-chisel--scala-syntax&quot;&gt;Chisel &amp;amp; Scala Syntax&lt;/h2&gt;

&lt;p&gt;Useful resource:&lt;/p&gt;

&lt;p&gt;Chisel &lt;a href=&quot;https://github.com/freechipsproject/chisel3/wiki/CS250-Chisel+Scala-Primer&quot;&gt;Wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chisel &lt;a href=&quot;https://github.com/freechipsproject/chisel3/wiki/Cookbook&quot;&gt;CookBook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chisel3 &lt;a href=&quot;https://www.chisel-lang.org/api/latest/chisel3/index.html&quot;&gt;API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.runoob.com/scala/scala-tutorial.html&quot;&gt;Runoob Scala tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scala language &lt;a href=&quot;https://static.runoob.com/download/Scala%E8%AF%AD%E8%A8%80%E8%A7%84%E8%8C%83.pdf&quot;&gt;PDF&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;heading-chiselqueue&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chisel.Queue&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;qa&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// io.a is the input to the FIFO
&lt;/span&gt;																				 &lt;span class=&quot;c1&quot;&gt;// qa is DecoupledIO output from FIFO
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;heading-chiseldecoupled&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chisel.Decoupled&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Flipped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Decoupled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;32.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// valid and bits are inputs
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Decoupled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;32.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// valid and bits are outputs
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;heading-chiselsuggestname&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chisel.suggestName&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;		&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;incremented&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// We cannot name this, it's inside a method
&lt;/span&gt;				&lt;span class=&quot;nv&quot;&gt;incremented&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;suggestName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;incremented&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Now it is named!
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;heading-chiselprint&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chisel.print&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${io.in}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;// chisel3.core.UInt@e
&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$io&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;// Bundle(in-&amp;gt;3, out-&amp;gt;3)
&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;out = ${peek(c.io.out)}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;// out = Vector(0, 0, 0, 0, 0, 0)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;heading-scalazip&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scala.zip&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Pair up values in two lists.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;zipWithIndex&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res0&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;heading-scalamap&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scala.map&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Applies a function to each element in a list and returns the resulting transformation in a list&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;list1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toList&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res3&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res4&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;heading-scalareduce-reduceleft--reduceright&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scala.reduce&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduceLeft&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduceRight&lt;/code&gt;)&lt;/h3&gt;

&lt;p&gt;In each step, a function is performed on the list element and the result of the last fold operation, returning a single value.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;list1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toList&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res51&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1 + 2 =  3, list1 = List(3, 3, 4, 5)
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3 + 3 =  6, list1 = List(6, 4, 5)
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 6 + 4 = 10, list1 = List(10, 5)
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res52&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;heading-scalalisttakeint&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scala.List.take(Int)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;See &lt;a href=&quot;https://www.runoob.com/scala/scala-lists.html&quot;&gt;Scala List&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mcrenf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;VecInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;loop_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;when_carry&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexedSeq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mcrenf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MCRENF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;when_carry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;heading-reg-delay-test&quot;&gt;Reg Delay Test&lt;/h3&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TheOperModule&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Module&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;out_reg0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;out_reg1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;out_reg2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;

				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a_reg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b_reg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c_reg1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d_reg2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;a_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;a&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;b_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;b&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;c_reg1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;b&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;d_reg2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_reg&lt;/span&gt;
		
				&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;out_reg0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;b&lt;/span&gt;
				&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;out_reg1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_reg1&lt;/span&gt;
				&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;out_reg2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_reg2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyOperTester&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TheOperModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PeekPokeTester&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in_a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in_b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;poke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;poke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clock 0, out_reg0 = ${peek(c.io.out_reg0)}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;         out_reg1 = ${peek(c.io.out_reg1)}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;         out_reg2 = ${peek(c.io.out_reg2)}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clock 1, out_reg0 = ${peek(c.io.out_reg0)}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;         out_reg1 = ${peek(c.io.out_reg1)}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;         out_reg2 = ${peek(c.io.out_reg2)}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clock 2, out_reg0 = ${peek(c.io.out_reg0)}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;         out_reg1 = ${peek(c.io.out_reg1)}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;         out_reg2 = ${peek(c.io.out_reg2)}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TheOperModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyOperTester&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&quot;language-pusdo&quot;&gt;[info] [0.001] clock 0, out_reg0 = 5
[info] [0.001]          out_reg1 = 0
[info] [0.001]          out_reg2 = 0
[info] [0.001] clock 1, out_reg0 = 5
[info] [0.001]          out_reg1 = 5 // arrive reg 1
[info] [0.002]          out_reg2 = 0
[info] [0.002] clock 2, out_reg0 = 5
[info] [0.002]          out_reg1 = 5
[info] [0.002]          out_reg2 = 5 // arrive reg 2
&lt;/code&gt;&lt;/pre&gt;</content><author><name>SingularityKChen</name></author><category term="WeeklyReview" /><category term="EIE" /><category term="NAS" /><category term="CSC" /><category term="Chisel" /><category term="Scala" /><category term="DesignAutomation" /><summary type="html">There is no thing to show~</summary></entry><entry><title type="html">2019/12/30-2020/01/05 weekly review</title><link href="http://localhost:4000/blog/2020/01/05/2019-12-30-2020-01-05-weekly-review/" rel="alternate" type="text/html" title="2019/12/30-2020/01/05 weekly review" /><published>2020-01-05T00:00:00+08:00</published><updated>2020-01-05T00:00:00+08:00</updated><id>http://localhost:4000/blog/2020/01/05/2019-12-30-2020-01-05-weekly-review</id><content type="html" xml:base="http://localhost:4000/blog/2020/01/05/2019-12-30-2020-01-05-weekly-review/">&lt;ul class=&quot;toc&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-20191230-20200105&quot; id=&quot;markdown-toc-heading-20191230-20200105&quot;&gt;2019/12/30-2020/01/05&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-a-survey-on-methods-and-theories-of-quantized-neural-networks&quot; id=&quot;markdown-toc-heading-a-survey-on-methods-and-theories-of-quantized-neural-networks&quot;&gt;A Survey on Methods and Theories of Quantized Neural Networks&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-quantization-techniques&quot; id=&quot;markdown-toc-heading-quantization-techniques&quot;&gt;Quantization Techniques&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-two-quantization-methodologies&quot; id=&quot;markdown-toc-heading-two-quantization-methodologies&quot;&gt;Two Quantization Methodologies&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-discussion&quot; id=&quot;markdown-toc-heading-discussion&quot;&gt;Discussion&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-why-does-quantization-work&quot; id=&quot;markdown-toc-heading-why-does-quantization-work&quot;&gt;Why Does Quantization Work?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-future-of-quantized-neural-networks&quot; id=&quot;markdown-toc-heading-future-of-quantized-neural-networks&quot;&gt;Future of Quantized Neural Networks&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-some-terms&quot; id=&quot;markdown-toc-heading-some-terms&quot;&gt;Some Terms&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-stackelberg-game&quot; id=&quot;markdown-toc-heading-stackelberg-game&quot;&gt;Stackelberg Game&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-fog-computation&quot; id=&quot;markdown-toc-heading-fog-computation&quot;&gt;Fog Computation&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;heading-20191230-20200105&quot;&gt;2019/12/30-2020/01/05&lt;/h1&gt;

&lt;p&gt;Last week, I only read one article which is the survey of QNN. Although I know how to utilize several QNN models to reduce the memory requirements and power consumption, I don't understand why those formulas work due to the lack of some basic mathematic knowledge in the neural network.&lt;/p&gt;

&lt;p&gt;I took my main time and energy to write my initial stage's report of my final year's project. During that period, I recall the paper I read the past month and thought over my project in more detail. I thought I could start my project with the basic processing element and then read more paper to find something interesting and then optimize the design.&lt;/p&gt;

&lt;p&gt;Also, before the new year, I created one new Linux virtual machine with Virtual Box. And after the new year, I downloaded the latest Chipyard project from GitHub and rebuilt the environment in both mine virtual machine and Shien's. Fortunately, the new environment works now.&lt;/p&gt;

&lt;p&gt;And this week, I will try to read as many Song Han's papers as possible before his seminar, and then I will read some other papers &lt;a href=&quot;#20191216-22&quot;&gt;listed before&lt;/a&gt;. I hope I could finish the translation work of chisel-Bootcamp module 3.6 before this Saturday. After that, I will begin the design of PE in my FYP.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading-a-survey-on-methods-and-theories-of-quantized-neural-networks&quot;&gt;A Survey on Methods and Theories of Quantized Neural Networks&lt;/h2&gt;

&lt;h3 id=&quot;heading-quantization-techniques&quot;&gt;Quantization Techniques&lt;/h3&gt;

&lt;h4 id=&quot;heading-deterministic-quantization&quot;&gt;Deterministic quantization&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/E83E8CAU8qoHf9i7/image.png&quot; alt=&quot;Summarization of different quantization methods&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rounding&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/58vtJu1ZLs8MoiXT/image.png&quot; alt=&quot;rounding function&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Vector Quantization: cluster the weights into groups and use the centroid of each group to replace the actual weights during inference.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/tYIO1b2acTYLsA2f/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ k-means
+ Hessian weighted k-means
+ product quantization
+ residual quantization
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Quantization as Optimization: formulating the quantization problem as an optimization problem&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;heading-stochastic-quantization&quot;&gt;Stochastic Quantization&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Random Rounding: In random rounding, the real value has no one-to-one mapping to the quantized value. Typically, the quantized value is sampled from a discrete distribution which is parameterized by the real values.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/Nj7hgrxuuyIB8VSC/image.png&quot; alt=&quot;random rounding function&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Probabilistic Quantization: the weights are assumed to be discretely distributed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;heading-two-quantization-methodologies&quot;&gt;Two Quantization Methodologies&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/Lcm0g5YaotI8sPTx/image.png&quot; alt=&quot;Summarization of fixed codebook and adaptive codebook quantization&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;heading-fixed-codebook-quantization&quot;&gt;Fixed codebook quantization&lt;/h4&gt;

&lt;p&gt;The codebook is predefined.&lt;/p&gt;

&lt;h4 id=&quot;heading-adaptive-codebook-quantization&quot;&gt;Adaptive Codebook Quantization&lt;/h4&gt;

&lt;p&gt;The codebook is learned from the data. Vector quantization and probabilistic quantization are two possible methods to achieve adaptive codebook quantization.&lt;/p&gt;

&lt;p&gt;Two kinds of adaptive codebook quantization exist: hard quantization and soft quantization.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In hard quantization, the real value is assigned exactly to be one of the discrete values.&lt;/li&gt;
  &lt;li&gt;In soft quantization the real value is assigned to be some discrete value according to a probability distribution.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;heading-discussion&quot;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;Quantized weights and activations occupy less memory compared with full-precision counterparts. Meanwhile, the training and inference speed can be greatly accelerated since the dot products
between weights and activations can be replaced by bitwise operations. Quantized gradients can reduce the overhead of gradient synchronization in parallel neural network training. In a single worker scenario, quantized gradients can accelerate back-propagation training as well as requiring less memory.&lt;/p&gt;

&lt;h3 id=&quot;heading-why-does-quantization-work&quot;&gt;Why Does Quantization Work?&lt;/h3&gt;

&lt;p&gt;They found that the binarization operation preserves some important properties of the full-precision networks, i.e,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Angle Preservation Property&lt;/li&gt;
  &lt;li&gt;Dot Product Proportionality Property&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;heading-future-of-quantized-neural-networks&quot;&gt;Future of Quantized Neural Networks&lt;/h3&gt;

&lt;p&gt;The following possible directions for the next steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Develop more sophisticated rounding mechanism to train quantized neural network from scratch. One possible approach is to use the structure information of the weights to guide the rounding process.&lt;/li&gt;
  &lt;li&gt;Design quantized neural networks for tasks such as natural language processing, speech recognition and so on. Due to the varieties of deep learning models, a generally applicable quantization method is necessary.&lt;/li&gt;
  &lt;li&gt;Develop theoretical guidance for quantizing neural networks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;heading-some-terms&quot;&gt;Some Terms&lt;/h2&gt;

&lt;h3 id=&quot;heading-stackelberg-game&quot;&gt;Stackelberg Game&lt;/h3&gt;

&lt;p&gt;In the &lt;a href=&quot;https://wiki.mbalib.com/wiki/%E6%96%AF%E5%A1%94%E5%85%8B%E5%B0%94%E4%BC%AF%E6%A0%BC%E6%A8%A1%E5%9E%8B&quot;&gt;MBAlib&lt;/a&gt; describes the meaning of it.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Stackelberg leadership model&lt;/strong&gt; is a strategic game in economics in which the leader firm moves first and then the follower firms move sequentially.&lt;/p&gt;

&lt;h3 id=&quot;heading-fog-computation&quot;&gt;Fog Computation&lt;/h3&gt;</content><author><name>SingularityKChen</name></author><category term="WeeklyReview" /><category term="QNN" /><summary type="html">There is no thing to show~</summary></entry><entry><title type="html">2019/12/23-29 weekly review</title><link href="http://localhost:4000/blog/2019/12/29/2019-12-23-29-weekly-review/" rel="alternate" type="text/html" title="2019/12/23-29 weekly review" /><published>2019-12-29T00:00:00+08:00</published><updated>2019-12-29T00:00:00+08:00</updated><id>http://localhost:4000/blog/2019/12/29/2019-12-23-29-weekly-review</id><content type="html" xml:base="http://localhost:4000/blog/2019/12/29/2019-12-23-29-weekly-review/">&lt;ul class=&quot;toc&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-20191223-29&quot; id=&quot;markdown-toc-heading-20191223-29&quot;&gt;2019/12/23-29&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-efficient-processing-of-deep-neural-networks-a-tutorial-and-survey&quot; id=&quot;markdown-toc-heading-efficient-processing-of-deep-neural-networks-a-tutorial-and-survey&quot;&gt;Efficient Processing of Deep Neural Networks: A Tutorial and Survey&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-creating-a-system-for-efficient-dnn-processing&quot; id=&quot;markdown-toc-heading-creating-a-system-for-efficient-dnn-processing&quot;&gt;Creating A System for Efficient DNN Processing&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-temporal-architectures-and-spatial-architectures&quot; id=&quot;markdown-toc-heading-temporal-architectures-and-spatial-architectures&quot;&gt;Temporal Architectures and Spatial Architectures&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-near-data-processing&quot; id=&quot;markdown-toc-heading-near-data-processing&quot;&gt;Near-Data Processing&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-co-design-of-dnn-models-and-hardware&quot; id=&quot;markdown-toc-heading-co-design-of-dnn-models-and-hardware&quot;&gt;Co-Design of DNN Models And Hardware&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-benchmarking-metrics-for-dnn-evaluation-and-comparison&quot; id=&quot;markdown-toc-heading-benchmarking-metrics-for-dnn-evaluation-and-comparison&quot;&gt;Benchmarking Metrics for DNN Evaluation and Comparison&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-eyeriss-v2-a-flexible-and-high-performance-accelerator-for-emerging-deep-neural-networks&quot; id=&quot;markdown-toc-heading-eyeriss-v2-a-flexible-and-high-performance-accelerator-for-emerging-deep-neural-networks&quot;&gt;Eyeriss v2: A Flexible and High-Performance Accelerator for Emerging Deep Neural Networks&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-changes-in-performance-and-flexibility&quot; id=&quot;markdown-toc-heading-changes-in-performance-and-flexibility&quot;&gt;Changes in Performance and Flexibility&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-eyexam&quot; id=&quot;markdown-toc-heading-eyexam&quot;&gt;Eyexam&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-flexible-dataflow&quot; id=&quot;markdown-toc-heading-flexible-dataflow&quot;&gt;Flexible Dataflow&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-flexible-and-scalable-noc&quot; id=&quot;markdown-toc-heading-flexible-and-scalable-noc&quot;&gt;Flexible and Scalable NoC&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-eyeriss-a-spatial-architecture-for-energy-efficient-dataflow-for-convolutional-neural-networks&quot; id=&quot;markdown-toc-heading-eyeriss-a-spatial-architecture-for-energy-efficient-dataflow-for-convolutional-neural-networks&quot;&gt;Eyeriss: A Spatial Architecture for Energy-Efficient Dataflow for Convolutional Neural Networks&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-framework-for-energy-efficiency-analysis&quot; id=&quot;markdown-toc-heading-framework-for-energy-efficiency-analysis&quot;&gt;Framework for Energy Efficiency Analysis&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-eyeriss-an-energy-efficient-reconfigurable-accelerator-for-deep-convolutional-neural-networks&quot; id=&quot;markdown-toc-heading-eyeriss-an-energy-efficient-reconfigurable-accelerator-for-deep-convolutional-neural-networks&quot;&gt;Eyeriss: An Energy-Efficient Reconfigurable Accelerator for Deep Convolutional Neural Networks&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-main-features-of-eyeriss&quot; id=&quot;markdown-toc-heading-main-features-of-eyeriss&quot;&gt;Main Features of Eyeriss&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-system-control-and-configuration&quot; id=&quot;markdown-toc-heading-system-control-and-configuration&quot;&gt;System Control and Configuration&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-exploit-data-statistics&quot; id=&quot;markdown-toc-heading-exploit-data-statistics&quot;&gt;Exploit Data Statistics&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-some-troubles&quot; id=&quot;markdown-toc-heading-some-troubles&quot;&gt;Some Troubles&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-scalac_2124423&quot; id=&quot;markdown-toc-heading-scalac_2124423&quot;&gt;Scalac_2.12.4:4.2.3&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-no-found-firrlt-object&quot; id=&quot;markdown-toc-heading-no-found-firrlt-object&quot;&gt;No found: firrlt object&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;heading-20191223-29&quot;&gt;2019/12/23-29&lt;/h1&gt;

&lt;p&gt;Last week, I read four Journal Articles related to Deep Learning Accelerator Implementation. Thanks to Shien's recommendation, I learned a lot from these articles as I have a more vivid knowledge of DLA with several in-deep views in some components.&lt;/p&gt;

&lt;p&gt;When I reviewed these four articles, I found that even though I know how to design the hardware architecture, I may not know how to run some DNN models with the accelerator. Letty told me that they need the help of some compilers to translate the models to instructions, but I don't think I could optimize the compiler to compile the program into my custom instructions. So maybe I would not run a complex model if I can not load instructions manually.&lt;/p&gt;

&lt;p&gt;And next week, I am supposed to read some papers which describe the method to compress the different types of data in CNN, i.e., QNN, to decrease the movements of data and the storage requirements of its four levels of the memory hierarchy. Besides, Chen Peng has introduced me thinking that routers can also be regards as one of the calculation components in NoC, so maybe the next few weeks, I will improve the dataflow of Eyeriss with this kind of pattern.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading-efficient-processing-of-deep-neural-networks-a-tutorial-and-survey&quot;&gt;Efficient Processing of Deep Neural Networks: A Tutorial and Survey&lt;/h2&gt;

&lt;p&gt;This article focuses on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;processing of DNN inference&lt;/li&gt;
  &lt;li&gt;addressing the efficiency of the CONV layers&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;heading-creating-a-system-for-efficient-dnn-processing&quot;&gt;Creating A System for Efficient DNN Processing&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Applications and specific computations requirements&lt;/li&gt;
  &lt;li&gt;Understand and balance the important system metrics
    &lt;ul&gt;
      &lt;li&gt;Accuracy
        &lt;ul&gt;
          &lt;li&gt;Energy&lt;/li&gt;
          &lt;li&gt;Throughput&lt;/li&gt;
          &lt;li&gt;Hardware cost&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Optimize DNN processing&lt;/li&gt;
  &lt;li&gt;Joint hardware/software co-design&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;heading-temporal-architectures-and-spatial-architectures&quot;&gt;Temporal Architectures and Spatial Architectures&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/Y0FJBfLpHro9PDzw/image.png&quot; alt=&quot;Temporal Architectures and Spatial Architectures&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;heading-temporal-architectures&quot;&gt;Temporal Architectures&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;appear mostly in CPUs or GPUs&lt;/li&gt;
  &lt;li&gt;employ a variety of techniques to improve parallelisms such as vectors (SIMD) or parallel threads (SIMT)&lt;/li&gt;
  &lt;li&gt;use a centralized control for a large number of ALUs&lt;/li&gt;
  &lt;li&gt;can only fetch data from the memory hierarchy&lt;/li&gt;
  &lt;li&gt;cannot communicate directly with each other&lt;/li&gt;
  &lt;li&gt;reduce the number of multiplications to increase throughput&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;heading-spatial-architectures&quot;&gt;Spatial Architectures&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;use dataflow processing can pass data from one to another directly&lt;/li&gt;
  &lt;li&gt;ALU can have its control logic and local memory&lt;/li&gt;
  &lt;li&gt;how dataflows can increase data reuse from low-cost memories in the memory hierarchy to reduce energy consumption&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;heading-apply-computational-transforms-to-the-data&quot;&gt;Apply Computational Transforms to The Data&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Fast Fourier Transform (FFT) from O( $N^2_o$ $N^2_f$ ) to O($N^2_o$ $log_2N_o$)&lt;/li&gt;
  &lt;li&gt;Winograd’s algorithm&lt;/li&gt;
  &lt;li&gt;Strassen’s algorithm from O($N^3$) to O($N^{2.807}$)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;heading-energy-efficient-dataflow-for-accelerators&quot;&gt;Energy-Efficient Dataflow for Accelerators&lt;/h4&gt;

&lt;p&gt;Each MAC requires three memory reads:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;filter weight&lt;/li&gt;
  &lt;li&gt;fmap activation&lt;/li&gt;
  &lt;li&gt;partial sum&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And one memory write: updated partial sum.&lt;/p&gt;

&lt;p&gt;Different Dataflow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Weight Stationary &lt;em&gt;(WS)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Output Stationary &lt;em&gt;(OS)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;No Local Reuse &lt;em&gt;(NLR)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Row Stationary &lt;em&gt;(RS)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;heading-near-data-processing&quot;&gt;Near-Data Processing&lt;/h3&gt;

&lt;p&gt;We are supported to reduce data movement by moving compute and data closer. For example,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Integrate the computation into the memory itself&lt;/li&gt;
  &lt;li&gt;Bring the computation into the sensor where the data are first collected&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;heading-dram&quot;&gt;DRAM&lt;/h4&gt;

&lt;p&gt;Avoid off-chip access by using high-density memories such as DRAMs. which can store tens of megabytes of weights and activations on-chip.&lt;/p&gt;

&lt;p&gt;Also, with the help of through-silicon vias &lt;em&gt;(TSVs)&lt;/em&gt;, or 3-D memory, and HMC, HBM, the DRAM can be stacked on the top of the chip.&lt;/p&gt;

&lt;h4 id=&quot;heading-sram&quot;&gt;SRAM&lt;/h4&gt;

&lt;p&gt;Bring the compute into the memory.&lt;/p&gt;

&lt;h4 id=&quot;heading-non-volatile-resistive-memories&quot;&gt;Non-volatile Resistive Memories&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;resistor’s conductance as the weight&lt;/li&gt;
  &lt;li&gt;the voltage as the input&lt;/li&gt;
  &lt;li&gt;the current as the output&lt;/li&gt;
  &lt;li&gt;the addition is done by Kirchhoff’s current law&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But it has some cons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;suffers from the reduced precision as it needs ADC/DAC&lt;/li&gt;
  &lt;li&gt;the array size is limited by the wires&lt;/li&gt;
  &lt;li&gt;the IR drop along wire can degrade the read accuracy&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;heading-sensors&quot;&gt;Sensors&lt;/h4&gt;

&lt;p&gt;Need to move the computation into the analogy domain to avoid using the ADC within the sensor.&lt;/p&gt;

&lt;h3 id=&quot;heading-co-design-of-dnn-models-and-hardware&quot;&gt;Co-Design of DNN Models And Hardware&lt;/h3&gt;

&lt;h4 id=&quot;heading-reduce-precision&quot;&gt;Reduce Precision&lt;/h4&gt;

&lt;p&gt;And we can apply different precisions into weights and activations, different layers.&lt;/p&gt;

&lt;p&gt;Reduce the precision of operations and operands:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fixed point instead of floating-point&lt;/li&gt;
  &lt;li&gt;reducing the bit-width: uniform quantization&lt;/li&gt;
  &lt;li&gt;nonuniform quantization: map data to a smaller set of quantization levels
    &lt;ul&gt;
      &lt;li&gt;log quantization
        &lt;ul&gt;
          &lt;li&gt;learned quantization&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;weight sharing&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;heading-reduced-number-of-operations-and-model-size&quot;&gt;Reduced Number of Operations and Model Size&lt;/h4&gt;

&lt;p&gt;Reduce the number of operations and model size:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;compression: exploiting activation statistics&lt;/li&gt;
  &lt;li&gt;network pruning&lt;/li&gt;
  &lt;li&gt;compact network architectures: replace a large filter with a series of small filters&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;heading-benchmarking-metrics-for-dnn-evaluation-and-comparison&quot;&gt;Benchmarking Metrics for DNN Evaluation and Comparison&lt;/h3&gt;

&lt;h4 id=&quot;heading-metrics-for-dnn-models&quot;&gt;Metrics for DNN Models&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;The accuracy&lt;/li&gt;
  &lt;li&gt;The network architecture of the model including the number of layers, filter sizes, number of filters and number of channels&lt;/li&gt;
  &lt;li&gt;The number of weights: impact the storage requirement&lt;/li&gt;
  &lt;li&gt;The number of MACs: potential throughput&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;heading-metrics-for-dnn-hardware&quot;&gt;Metrics for DNN Hardware&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;The power  and energy consumption&lt;/li&gt;
  &lt;li&gt;The latency and throughput&lt;/li&gt;
  &lt;li&gt;The cost of the chip: the size and type of memory, the amount of control logic&lt;/li&gt;
  &lt;li&gt;For an FPGA,
    &lt;ul&gt;
      &lt;li&gt;the specific device
        &lt;ul&gt;
          &lt;li&gt;the utilization of resources such as:
            &lt;ul&gt;
              &lt;li&gt;DSP
                &lt;ul&gt;
                  &lt;li&gt;BRAM&lt;/li&gt;
                  &lt;li&gt;LUT&lt;/li&gt;
                  &lt;li&gt;FF&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;performance density
            &lt;ul&gt;
              &lt;li&gt;GOPs/slice&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;heading-eyeriss-v2-a-flexible-and-high-performance-accelerator-for-emerging-deep-neural-networks&quot;&gt;Eyeriss v2: A Flexible and High-Performance Accelerator for Emerging Deep Neural Networks&lt;/h2&gt;

&lt;p&gt;This article describes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a performance analysis framework named &lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Eyexam&lt;/code&gt;&lt;/em&gt; which provides a seven-step process to systematically identify the source of performance loss and can be used to develop a set of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roofline models&lt;/code&gt; to quantitatively identify the source of performance loss in DNN processors;&lt;/li&gt;
  &lt;li&gt;a DNN accelerator named &lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Eyeriss v2&lt;/code&gt;&lt;/em&gt; which uses a hierarchical &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NoC&lt;/code&gt; that allows the system to exploit spatial data reuse for large DNNs and deliver high bandwidth for compact DNNs with the scalability;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;heading-changes-in-performance-and-flexibility&quot;&gt;Changes in Performance and Flexibility&lt;/h3&gt;

&lt;h4 id=&quot;heading-two-bad-ways-in-widely-varying-data-reuse&quot;&gt;Two Bad Ways in Widely Varying Data Reuse&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;depend on data reuse in certain data dimensions
    &lt;ul&gt;
      &lt;li&gt;the spatial accumulation array architecture relies on both output and input channels;
        &lt;ul&gt;
          &lt;li&gt;the temporal accumulation array architecture relies on another set of data dimensions;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;lower data reuse need a higher data bandwidth&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;heading-to-build-a-truly-flexible-dnn-processor&quot;&gt;To Build a Truly Flexible DNN Processor&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;the dataflow relies on certain data dimensions for data reuse
    &lt;ul&gt;
      &lt;li&gt;low utilization of the parallelism when those data dimensions diminish&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the NoC and its corresponding memory hierarchy
    &lt;ul&gt;
      &lt;li&gt;high bandwidth and low spatial data reuse;
        &lt;ul&gt;
          &lt;li&gt;low bandwidth and high spatial data reuse scenarios;&lt;/li&gt;
          &lt;li&gt;instead of being adaptive to the specific condition of the workload;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;heading-eyexam&quot;&gt;Eyexam&lt;/h3&gt;

&lt;h4 id=&quot;heading-two-main-factors-that-affect-performance&quot;&gt;Two Main Factors that Affect Performance&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;the number of active PEs due to the mapping determined by the dataflow;&lt;/li&gt;
  &lt;li&gt;the utilization of active PEs based on whether the NoC has sufficient bandwidth to deliver data to PEs to keep them active;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a example dataflow for a 1D CONV:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// R0, R1, R2 related to filter&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;R2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//chnl of filter, C, sum of one chnl ofmap&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;R1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//height of filter, R, psum of one row ofmap&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;R0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//width of filter, S, ppsum of one ofmap&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// E0, E1, E2 related to ofmap&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;E2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//chnl of ofmap or number of filters, M, sums in different chnl ofmaps&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;E1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//height of ofmap, E, psum of one chnl ofmap&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;E0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//width of ofmap, F, ppsum of one row ofmap&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inx_o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inx_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inx_w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
								&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
										&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
												&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
														&lt;span class=&quot;n&quot;&gt;inx_o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
														&lt;span class=&quot;n&quot;&gt;inx_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
														&lt;span class=&quot;n&quot;&gt;inx_w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
														&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;O[%d] += I[%d] * W[%d]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inx_o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inx_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inx_w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
														&lt;span class=&quot;c1&quot;&gt;//printf(&quot;O[e2*E1*E0+e1*E0+e0] = O[%d*E1*E0+%d*E0+%d]\n&quot;, e2, e1, e0);&lt;/span&gt;
														&lt;span class=&quot;cm&quot;&gt;/* code */&lt;/span&gt;
												&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
												&lt;span class=&quot;cm&quot;&gt;/* code */&lt;/span&gt;
												&lt;span class=&quot;c1&quot;&gt;//printf(&quot;----------- r0 for loop finished -----------\n&quot;);&lt;/span&gt;
												&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
										&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
										&lt;span class=&quot;cm&quot;&gt;/* code */&lt;/span&gt;
										&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*********** e0 for loop finished ***********&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
								&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
								&lt;span class=&quot;cm&quot;&gt;/* code */&lt;/span&gt;
								&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;+++++++++++ r1 for loop finished +++++++++++&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
						&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
						&lt;span class=&quot;cm&quot;&gt;/* code */&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;=========== e1 for loop finished ===========&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;cm&quot;&gt;/* code */&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@@@@@@@@@@@ r2 for loop finished @@@@@@@@@@@&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;inner two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt; loops represent the temporal processing and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SPad&lt;/code&gt; accesses within a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PE&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;the outer two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt; loops represent the temporal processing of multiple passes across the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PE&lt;/code&gt; array and GLB accesses;&lt;/li&gt;
  &lt;li&gt;the two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallel-for&lt;/code&gt;s represent the distribution of computation across multiple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PE&lt;/code&gt;s;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;heading-seven-steps-to-analyse-the-performance-of-an-architecture&quot;&gt;Seven steps to analyse the performance of an architecture&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;layer shape and size: the number of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAC&lt;/code&gt;s in the layer&lt;/li&gt;
  &lt;li&gt;dataflow: the maximum parallelism of the dataflow&lt;/li&gt;
  &lt;li&gt;number of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PE&lt;/code&gt;s: the theoretical peak performance. Two shape fragmentation:
    &lt;ul&gt;
      &lt;li&gt;spatial mapping fragmentation: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R1&lt;/code&gt; is smaller than the number of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PE&lt;/code&gt;s =&amp;gt; some are completely idle
        &lt;ul&gt;
          &lt;li&gt;temporal mapping fragmentation: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt; is not an integer multiple of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PE&lt;/code&gt;s =&amp;gt; some are not always active&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;physical dimensions of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PE&lt;/code&gt; array: the run-time utilization of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PE&lt;/code&gt;s due to shape fragmentation for each dimension&lt;/li&gt;
  &lt;li&gt;storage capacity: reduce the number of active &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PE&lt;/code&gt;s due to storage of intermediate data. e.g., limited storage for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;psum&lt;/code&gt;s =&amp;gt; the limited number of weights be processed in parallel =&amp;gt; limited number of active &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PE&lt;/code&gt;s that can operate in parallel&lt;/li&gt;
  &lt;li&gt;data bandwidth: insufficient average bandwidth to active &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PE&lt;/code&gt;s. The performance will be bandwidth-limited when the operational intensity is lower than the inflection point&lt;/li&gt;
  &lt;li&gt;varying data access patterns: insufficient instant bandwidth to active &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PE&lt;/code&gt;s&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/C9YNzwIHSE87b2sJ/image.png&quot; alt=&quot;the roofline model&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/OJ7PwTSeEwIakuk9/image.png&quot; alt=&quot;the impact of Eyexam steps on the roofline model&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/baEhAdv31Z0zD03y/image.png&quot; alt=&quot;summary of steps in Eyexam&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;heading-performance-analysis-results-for-dnn-processors-and-workloads&quot;&gt;Performance Analysis Results for DNN Processors and Workloads&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;simply increasing hardware resources is not sufficient to achieve a higher performance&lt;/li&gt;
  &lt;li&gt;the dataflow has to be flexible enough to deal the diminished reuse available in any data dimensions&lt;/li&gt;
  &lt;li&gt;the NoC design should meet the worst-case bandwidth requirement for every data type&lt;/li&gt;
  &lt;li&gt;the NoC design should aim to exploit data reuse to minimize the number of GLB accesses&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;heading-flexible-dataflow&quot;&gt;Flexible Dataflow&lt;/h3&gt;

&lt;p&gt;The new dataflow named &lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Row-Stationary Plus&lt;/code&gt;&lt;/em&gt; supports data tiling from all dimensions to fully utilize the PE array.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;additional loops &lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;g1&lt;/code&gt;&lt;/em&gt; and &lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n1&lt;/code&gt;&lt;/em&gt; are added at the NoC level to provide more options to parallelize different dimensions of data&lt;/li&gt;
  &lt;li&gt;allow data to be tiled from multiple dimensions and mapped in parallel onto the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PE&lt;/code&gt; array dimension&lt;/li&gt;
  &lt;li&gt;the data tile from the same dimension can also be mapped spatially onto different physical dimensions to fully utilize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PE&lt;/code&gt; array&lt;/li&gt;
  &lt;li&gt;allow tile in data dimension &lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt;&lt;/em&gt; with loop &lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r1&lt;/code&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;an additional loop &lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e0&lt;/code&gt;&lt;/em&gt; is added at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SPad&lt;/code&gt; level to create more reuse of weights in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SPad&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/Lr26hZAgvUcKEqu7/image.png&quot; alt=&quot;The definition of the Row-Stationary Plus (RS+) dataflow&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;inx_o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m0&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e0&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;inx_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e0&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f0&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;inx_w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m0&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;inx_o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;inx_w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;inx_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;heading-flexible-and-scalable-noc&quot;&gt;Flexible and Scalable NoC&lt;/h3&gt;

&lt;p&gt;A new NoC named &lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hierarchical mesh&lt;/code&gt;&lt;/em&gt; is designed to adapt to a wide range of bandwidth requirements.&lt;/p&gt;

&lt;h4 id=&quot;heading-the-pros-and-cons-of-different-noc-implementations&quot;&gt;The Pros and Cons of Different NoC Implementations&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Broadcast Network: high reuse but low bandwidth&lt;/li&gt;
  &lt;li&gt;Unicast Network: high bandwidth but low reuse&lt;/li&gt;
  &lt;li&gt;All-to-All Network: implementation cost and energy consumption increase quadratically&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/otl1ciltLJkHZZql__thumbnail&quot; alt=&quot;The pros and cons of different NoC implementations&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;heading-architecture-and-work-models-of-hierarchical-mesh-network&quot;&gt;Architecture and Work Models of Hierarchical Mesh Network&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/KGUO8tm73RYl12vk/image.png__thumbnail&quot; alt=&quot;Architecture of Hierarchical Mesh Network&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/xxbVBVUFHdkow9E3/image.png__thumbnail&quot; alt=&quot;Work Models of Hierarchical Mesh Network&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;heading-considerations&quot;&gt;Considerations&lt;/h4&gt;

&lt;p&gt;The size of clusters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;what is the bandwidth required from the source cluster in the worst case, i.e., unicast mode;&lt;/li&gt;
  &lt;li&gt;what is the bandwidth required in between the router clusters in the worst case, i.e., interleaved multicast mode;&lt;/li&gt;
  &lt;li&gt;what is the tolerable cost of the all-to-all network;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The tile size of the mapped data dimensions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the cluster size&lt;/li&gt;
  &lt;li&gt;the number of clusters&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;heading-eyeriss-a-spatial-architecture-for-energy-efficient-dataflow-for-convolutional-neural-networks&quot;&gt;Eyeriss: A Spatial Architecture for Energy-Efficient Dataflow for Convolutional Neural Networks&lt;/h2&gt;

&lt;p&gt;Compared to the &lt;a href=&quot;#eyeriss-v2-a-flexible-and-high-performance-accelerator-for-emerging-deep-neural-networks&quot;&gt;Eyeriss v2&lt;/a&gt;, this article provides a more detailed explanation of &lt;em&gt;Row Stationary&lt;/em&gt;, a baseline storage area for a given number of PEs and the energy cost estimation for RS reuse pattern.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This article proposed RS dataflow which can adapt to different CNN shape configurations and reduces all types of data movement through maximally utilizing the processing engine (PE) local storage, direct inter-PE communication and spatial parallelism.&lt;/p&gt;

&lt;p&gt;Also, an analysis framework that compares energy cost under the same hardware area and processing parallelism constraints.&lt;/p&gt;

&lt;h3 id=&quot;heading-framework-for-energy-efficiency-analysis&quot;&gt;Framework for Energy Efficiency Analysis&lt;/h3&gt;

&lt;h4 id=&quot;heading-storage-area&quot;&gt;Storage Area&lt;/h4&gt;

&lt;p&gt;The baseline storage area for a given number of PEs is calculated as&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#PE×Area(512B RF)+Area((#PE×512B) global buffer).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/H6Ir275vy2cj9SXP/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;heading-input-data-access-energy-cost&quot;&gt;Input Data Access Energy Cost&lt;/h4&gt;

&lt;p&gt;Input data access energy cost estimation:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a×EC(DRAM)+ab×EC(global buffer)+abc×EC(array)+abcd×EC(RF)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/4HIcPqN7ZJYtzTZu/image.png&quot; alt=&quot;Example of input data&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;heading-psum-accumulation-energy-cost&quot;&gt;Psum Accumulation Energy Cost&lt;/h4&gt;

&lt;p&gt;Psum accumulation energy cost estimation:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(2a−1)×EC(DRAM)+2a(b−1)×EC(global buffer)+ab(c−1)×EC(array)+2abc(d−1)×EC(RF)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/YpjPqAj7BIkUqJOS/image.png&quot; alt=&quot;Example of Psum accumulation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EC(*)&lt;/code&gt; is shown as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/QQxUYwRr9kEkrpyE/image.png&quot; alt=&quot;NORMALIZED ENERGY COST RELATIVE TO A MAC OPERATION EXTRACTED FROM A COMMERCIAL 65NM PROCESS&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;heading-eyeriss-an-energy-efficient-reconfigurable-accelerator-for-deep-convolutional-neural-networks&quot;&gt;Eyeriss: An Energy-Efficient Reconfigurable Accelerator for Deep Convolutional Neural Networks&lt;/h2&gt;

&lt;p&gt;Compared to the &lt;a href=&quot;#eyeriss-v2-a-flexible-and-high-performance-accelerator-for-emerging-deep-neural-networks&quot;&gt;Eyeriss v2&lt;/a&gt; and &lt;a href=&quot;#eyeriss-an-energy-efficient-reconfigurable-accelerator-for-deep-convolutional-neural-networks&quot;&gt;Eyeriss energy&lt;/a&gt;, this article provides a more detailed explanation on the system architecture of the NoC communication as well as mapping of the PE sets. Also, it introduces an RLC compressed form to reduce the data size as related components in PE architecture.&lt;/p&gt;

&lt;p&gt;Plus, this article mentions CNN biases, but there is nothing related to the biases in the architecture it describes.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This article introduces the way to reduce the cost of data movement by exploiting data reuse in a multilevel memory hierarchy.  Also, techniques such as compression and data-adaptive processing are introduced to save both memory bandwidth and processing power.&lt;/p&gt;

&lt;h3 id=&quot;heading-main-features-of-eyeriss&quot;&gt;Main Features of Eyeriss&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;A four-level memory hierarchy. Data movement can exploit low-cost levels:
    &lt;ul&gt;
      &lt;li&gt;the PE scratch pads
        &lt;ul&gt;
          &lt;li&gt;the inter-PE communication&lt;/li&gt;
          &lt;li&gt;the large on-chip global buffer (GLB)&lt;/li&gt;
          &lt;li&gt;the off-chip DRAM.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A CNN dataflow, called Row Stationary (RS), that reconfigures the spatial architecture to map the computation of a given CNN shape and optimize for the best energy efficiency.&lt;/li&gt;
  &lt;li&gt;A network-on-chip (NoC) architecture that uses both multicast and point-to-point single-cycle data delivery to support the RS dataflow.&lt;/li&gt;
  &lt;li&gt;Run-length compression (RLC) and PE data gating that exploits the statistics of zero data in CNNs to further improve energy efficiency.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the architecture of Eyeriss system:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/KUn0Ny1sa6wMuMuy/image.png&quot; alt=&quot;Eyeriss system architecture&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;heading-system-control-and-configuration&quot;&gt;System Control and Configuration&lt;/h3&gt;

&lt;p&gt;The accelerator has two levels of control hierarchy.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The top-level control coordinates:
    &lt;ul&gt;
      &lt;li&gt;traffic between the off-chip DRAM and the GLB through the asynchronous interface;
        &lt;ul&gt;
          &lt;li&gt;traffic between the GLB and the PE array through the NoC;&lt;/li&gt;
          &lt;li&gt;operation of the RLC CODEC and ReLU module.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The lower-level control consists of control logic in each PE, which runs independently of each other.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The size:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;spad capacity depends only on the filter row size (S)
but not the ifmap row size (W), and is equal to:
	+ S for a row of filter weights; 
	+ S for a sliding window of ifmap values;
	+ 1 for the psum accumulation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the height and the width of the PE set are equal to the number of filter rows (R) and ofmap rows (E), respectively.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/JlEPRdIC1rU50uoT/image.png&quot; alt=&quot;Mapping of the PE sets on the spatial array of 168 PEs for the CONV layers in AlexNet&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;heading-exploit-data-statistics&quot;&gt;Exploit Data Statistics&lt;/h3&gt;

&lt;p&gt;data statistics of CNN is explored to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;reduce DRAM accesses using compression, which is the most energy-consuming data movement per access, on top of the optimized dataflow;&lt;/li&gt;
  &lt;li&gt;skip the unnecessary computations to save processing power&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;heading-rlc&quot;&gt;RLC&lt;/h4&gt;

&lt;p&gt;RLC is used in Eyeriss to exploit the zeros in fmaps and save DRAM bandwidth.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://uploader.shimo.im/f/Ir9k6AuBWP0NWomF.png!thumbnail&quot; alt=&quot;an example of RLC encoding&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;heading-noc&quot;&gt;NoC&lt;/h4&gt;

&lt;p&gt;Requirements of the NoC architecture:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;support the data delivery patterns used in the RS dataflow; should be taken care of:
    &lt;ul&gt;
      &lt;li&gt;different convolution strides (U) result in the ifmap delivery, skipping certain rows in the array;
        &lt;ul&gt;
          &lt;li&gt;a set is divided into segments that are mapped onto different parts of the PE array;&lt;/li&gt;
          &lt;li&gt;multiple sets are mapped onto the array simultaneously and different data is required for each set&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;leverage the data reuse achieved by the RS dataflow to further improve energy efficiency;&lt;/li&gt;
  &lt;li&gt;provide enough bandwidth for data delivery to support the highly parallel processing in the PE array.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Three different types of networks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Global Input Network: is optimized for a single-cycle multicast from the GLB to a group of PEs that receive the same filter weight, ifmap value, or psum. The challenge is that the group of destination PEs varies across layers due to the differences in data type, convolution stride, and mapping.&lt;/li&gt;
  &lt;li&gt;Global Output Network: The GON is used to read the psums generated by a processing pass from the PE array back to the GLB.&lt;/li&gt;
  &lt;li&gt;Local Network: pass the psums from two consecutive rows of the same column&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/RrYcTIHJCF4DOYXc/image.png&quot; alt=&quot;Architecture of the GIN&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;heading-processing-element-and-data-gating&quot;&gt;Processing Element and Data Gating&lt;/h4&gt;

&lt;p&gt;The datapath is pipelined into three stages: one stage for spad access, and the remaining two for computation.&lt;/p&gt;

&lt;p&gt;An extra 12-b Zero Buffer is used to record the position of zeros in the ifmap spad. If a zero ifmap value is detected from the zero buffer, the gating logic will disable the read of the filter spad and prevent the MAC datapath from switching.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/MPBbaUOFLNEcqibp/image.png&quot; alt=&quot;PE architecture&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;heading-some-troubles&quot;&gt;Some Troubles&lt;/h2&gt;

&lt;h3 id=&quot;heading-scalac_2124423&quot;&gt;Scalac_2.12.4:4.2.3&lt;/h3&gt;

&lt;p&gt;I tried run verilator simulation with the default command&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make &lt;span class=&quot;nv&quot;&gt;CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;SmallBoomAndRocketConfig &lt;span class=&quot;nv&quot;&gt;BINARY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mt-vvadd.riscv run-binary
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But got the following error:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[warn]     Note: Unresolved dependencies path:
[error] sbt.librarymanagement.ResolveException: Error downloading org.scalameta:semanticdb-scalac_2.12.4:4.2.3
[error]   Not found
[error]   Not found
[error]   not found: /home/singularity/.ivy2/local/org.scalameta/semanticdb-scalac_2.12.4/4.2.3/ivys/ivy.xml
[error]   not found: https://repo1.maven.org/maven2/org/scalameta/semanticdb-scalac_2.12.4/4.2.3/semanticdb-scalac_2.12.4-4.2.3.pom
[error]   not found: https://oss.sonatype.org/content/repositories/snapshots/org/scalameta/semanticdb-scalac_2.12.4/4.2.3/semanticdb-scalac_2.12.4-4.2.3.pom
[error]   not found: https://oss.sonatype.org/content/repositories/releases/org/scalameta/semanticdb-scalac_2.12.4/4.2.3/semanticdb-scalac_2.12.4-4.2.3.pom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When I got into the website it mentioned &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://repo1.maven.org/maven2/org/scalameta/&lt;/code&gt; I could only found the version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4.2.3&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://repo1.maven.org/maven2/org/scalameta/semanticdb-scalac_2.13.1/4.2.3/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Firstly, I tried to change the Scala version to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.13.1&lt;/code&gt; but occurred some syntax errors when I tried to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sbt publishLocal&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firrtl&lt;/code&gt;, so I had to give up that way.&lt;/p&gt;

&lt;p&gt;Then, I wanted to find why the default Scala version is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.12.4&lt;/code&gt; though I had set that to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.12.1&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt;. Then I found the default setting was in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;variables.mk:143&lt;/code&gt;, so I changed it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.12.10&lt;/code&gt;, which is the same to that in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firrtl&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;heading-no-found-firrlt-object&quot;&gt;No found: firrlt object&lt;/h3&gt;

&lt;p&gt;After that, I countered with the old trouble: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;not found: object firrtl&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[error] /home/singularity/chipyard/tools/chisel3/src/main/scala/chisel3/ChiselExecutionOptions.scala:7:8: not found: object firrtl
[error] import firrtl.{AnnotationSeq, ExecutionOptionsManager, ComposableOptions}
[error]        ^
[error] /home/singularity/chipyard/tools/chisel3/src/main/scala/chisel3/ChiselExecutionOptions.scala:21:44: not found: type ComposableOptions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I tried to re-do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;publishLocal&lt;/code&gt; in almost all components in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chipyard/tools&lt;/code&gt; but failed.&lt;/p&gt;

&lt;p&gt;Then, Jiuyang told me that I was supposed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sbt publishLocal&lt;/code&gt; then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sbt update&lt;/code&gt; in these three directories in order:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;firrtl&lt;/li&gt;
  &lt;li&gt;chisel3&lt;/li&gt;
  &lt;li&gt;rocket-chip&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But while I tried to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;publishLocal&lt;/code&gt; under rocket-chip, I found the version of firrtl it need was 1.2 while I only had 1.3 version. So I re-do this flow with the correctness of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version := &quot;1.2-SNAPSHOT&quot;&lt;/code&gt;  in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt; under firrtl.&lt;/p&gt;

&lt;p&gt;Although I published the rocket-chip, I could not build chipyard successfully.&lt;/p&gt;</content><author><name>SingularityKChen</name></author><category term="WeeklyReview" /><category term="Eyeriss" /><category term="Eyexam" /><category term="DSH" /><category term="DNN" /><category term="EyerissV2" /><summary type="html">There is no thing to show~</summary></entry><entry><title type="html">2019/12/16-22 weekly review</title><link href="http://localhost:4000/blog/2019/12/22/2019-12-16-22-weekly-review/" rel="alternate" type="text/html" title="2019/12/16-22 weekly review" /><published>2019-12-22T00:00:00+08:00</published><updated>2019-12-22T00:00:00+08:00</updated><id>http://localhost:4000/blog/2019/12/22/2019-12-16-22-weekly-review</id><content type="html" xml:base="http://localhost:4000/blog/2019/12/22/2019-12-16-22-weekly-review/">&lt;ul class=&quot;toc&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-20191216-22&quot; id=&quot;markdown-toc-heading-20191216-22&quot;&gt;2019/12/16-22&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-functional-programming-principles-in-scala&quot; id=&quot;markdown-toc-heading-functional-programming-principles-in-scala&quot;&gt;Functional Programming Principles in Scala&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-week1&quot; id=&quot;markdown-toc-heading-week1&quot;&gt;Week1&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-week2&quot; id=&quot;markdown-toc-heading-week2&quot;&gt;Week2&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-efficient-processing-of-deep-neural-network-from-algorithms-to-hardware-architectures&quot; id=&quot;markdown-toc-heading-efficient-processing-of-deep-neural-network-from-algorithms-to-hardware-architectures&quot;&gt;Efficient Processing of Deep Neural Network: from Algorithms to Hardware Architectures&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;heading-20191216-22&quot;&gt;2019/12/16-22&lt;/h1&gt;

&lt;p&gt;Last week, I cost Monday to review the growth in the last two weeks, and Tuesday to prepare for the presentation on Thursday. And also, I improved the program of matrix sum I wrote two weeks ago, with an additional C test file. I learned the basic Scala knowledge on Wednesday but still lack some practice. Thursday to Saturday, I followed Shien's advice to watch the tutorial provided by one team in MIT who creates the Eyeriss project. A module of one translation project related to Chisel, named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bootcamp&lt;/code&gt;, also was done by me.&lt;/p&gt;

&lt;p&gt;Unfortunately, due to the complex and chaos steps of both Rocket Core and FPGA, which need to boot Linux, I haven't done the hardware simulation. However, after the monthly report to my advisor in UESTC, I got a more simple method to skip the boot, I'd try after Shiqing came back.&lt;/p&gt;

&lt;p&gt;So this week, I'll focus on some papers mentioned in the tutorial, including &lt;a href=&quot;https://github.com/SingularityKChen/Weekly_Review_in_NTU/blob/master/Reference.md&quot;&gt;reference&lt;/a&gt; 1-5, and several papers Shien suggested me to read, including &lt;a href=&quot;https://github.com/SingularityKChen/Weekly_Review_in_NTU/blob/master/Reference.md&quot;&gt;reference&lt;/a&gt;  6-14.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading-functional-programming-principles-in-scala&quot;&gt;Functional Programming Principles in Scala&lt;/h2&gt;

&lt;h3 id=&quot;heading-week1&quot;&gt;Week1&lt;/h3&gt;

&lt;h4 id=&quot;heading-classes-traits-objects-and-packages&quot;&gt;Classes, Traits, Objects and Packages&lt;/h4&gt;

&lt;h5 id=&quot;heading-classes&quot;&gt;Classes&lt;/h5&gt;

&lt;p&gt;Like in Java, classes can be instantiated using the new construct, there can be many “instances” (or “objects”) of the same class. Classes in Scala cannot have static members. You can use objects (see below) to achieve similar functionality as with static members in Java.&lt;/p&gt;

&lt;h5 id=&quot;heading-traits&quot;&gt;Traits&lt;/h5&gt;

&lt;p&gt;Traits are like interfaces in Java, but they can also contain concrete members, i.e. method implementations or field definitions.&lt;/p&gt;

&lt;h5 id=&quot;heading-objects&quot;&gt;Objects&lt;/h5&gt;

&lt;p&gt;The Object in Scala are like classes, but for every object definition, there is only one single instance.&lt;/p&gt;

&lt;h5 id=&quot;heading-packages&quot;&gt;Packages&lt;/h5&gt;

&lt;p&gt;Adding a statement such as package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo.bar&lt;/code&gt; at the top of a file makes the code in a file part of the package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo.bar&lt;/code&gt;. If you define a class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyClass&lt;/code&gt; in package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo.bar&lt;/code&gt;, you can import that specific class (and not anything else from that package) with import  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo.bar.MyClass&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&quot;heading-source-files&quot;&gt;Source Files&lt;/h5&gt;

&lt;p&gt;Package hierarchies should be reflected in the directory structure: a source file defining class C in package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo.bar&lt;/code&gt; should be stored in a  subdirectory as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo/bar/C.scala&lt;/code&gt;. Scala does not enforce this convention, but some tools such as the Scala IDE for eclipse might have problems otherwise.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/ityNPwFlFlYFAd2Y/coursera_scala_programming_and_computer.png&quot; alt=&quot;coursera scala programming_and_computer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/yMVPdcKxLiAcjY6p/coursera_programming_theory.png&quot; alt=&quot;coursera_programming_theory&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;heading-coursera-elements-of-programming&quot;&gt;Coursera Elements of Programming&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://uploader.shimo.im/f/adsbxh8TmaoV2Tdx.png!thumbnail&quot; alt=&quot;coursera_elements_of_programming&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In Scala, usually &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call-by-value&lt;/code&gt;, but can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&amp;gt;&lt;/code&gt; to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call-by-name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call-by-value&lt;/code&gt;, then it will calculate the values of the arguments firstly.&lt;/p&gt;

&lt;h4 id=&quot;heading-blocks&quot;&gt;Blocks&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The definitions inside a block are only visible from within the block&lt;/p&gt;

&lt;p&gt;It's not just named space control but it's also reusing outer definitions without passing them explicitly in parameters.&lt;/p&gt;

&lt;h4 id=&quot;heading-recursion&quot;&gt;Recursion&lt;/h4&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
				&lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;heading-week2&quot;&gt;Week2&lt;/h3&gt;

&lt;h4 id=&quot;heading-high-order-functions&quot;&gt;High Order Functions&lt;/h4&gt;

&lt;h5 id=&quot;heading-function-type&quot;&gt;Function Type&lt;/h5&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cube&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sumInts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sumCubes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cube&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;heading-anonymous-function&quot;&gt;Anonymous Function&lt;/h5&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sumInts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sumCubes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sumInts&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sumCubes&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sumCubes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sumInts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;heading-require-and-assert&quot;&gt;Require and Assert&lt;/h4&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Balabala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
								&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;y must be nonzero&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;heading-efficient-processing-of-deep-neural-network-from-algorithms-to-hardware-architectures&quot;&gt;Efficient Processing of Deep Neural Network: from Algorithms to Hardware Architectures&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://eyeriss.mit.edu/tutorial.html&quot;&gt;2016 MIT&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.rle.mit.edu/eems/publications/tutorials/&quot;&gt;2019 MIT&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://slideslive.com/38921492/efficient-processing-of-deep-neural-network-from-algorithms-to-hardware-architectures&quot;&gt;slides and video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OneNote&lt;/p&gt;</content><author><name>SingularityKChen</name></author><category term="WeeklyReview" /><category term="scala" /><category term="Eyeriss" /><category term="DSH" /><category term="DNN" /><summary type="html">There is no thing to show~</summary></entry><entry><title type="html">2019/12/09-15 weekly review</title><link href="http://localhost:4000/blog/2019/12/15/2019-12-09-15-weekly-review/" rel="alternate" type="text/html" title="2019/12/09-15 weekly review" /><published>2019-12-15T00:00:00+08:00</published><updated>2019-12-15T00:00:00+08:00</updated><id>http://localhost:4000/blog/2019/12/15/2019-12-09-15-weekly-review</id><content type="html" xml:base="http://localhost:4000/blog/2019/12/15/2019-12-09-15-weekly-review/">&lt;ul class=&quot;toc&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-20191209-15&quot; id=&quot;markdown-toc-heading-20191209-15&quot;&gt;2019/12/09-15&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-git-command&quot; id=&quot;markdown-toc-heading-git-command&quot;&gt;Git Command&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-the-workflow&quot; id=&quot;markdown-toc-heading-the-workflow&quot;&gt;the workflow&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-build-a-git-project&quot; id=&quot;markdown-toc-heading-build-a-git-project&quot;&gt;Build a git project&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-other-git-commands&quot; id=&quot;markdown-toc-heading-other-git-commands&quot;&gt;Other Git Commands&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-matrix-sum-accelerator&quot; id=&quot;markdown-toc-heading-matrix-sum-accelerator&quot;&gt;Matrix Sum Accelerator&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-chisel3-syntax&quot; id=&quot;markdown-toc-heading-chisel3-syntax&quot;&gt;Chisel3 Syntax&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-linux-c-syntax&quot; id=&quot;markdown-toc-heading-linux-c-syntax&quot;&gt;(Linux) C Syntax&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-asm-volatile&quot; id=&quot;markdown-toc-heading-asm-volatile&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asm volatile&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-create-a-c-matrix-with-2-d-array&quot; id=&quot;markdown-toc-heading-create-a-c-matrix-with-2-d-array&quot;&gt;create a C matrix with 2-D Array&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-pointer-and-address-access&quot; id=&quot;markdown-toc-heading-pointer-and-address-access&quot;&gt;Pointer and address access&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-risc-v-spec&quot; id=&quot;markdown-toc-heading-risc-v-spec&quot;&gt;RISC-V SPEC&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-chipyard&quot; id=&quot;markdown-toc-heading-chipyard&quot;&gt;Chipyard&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-sha3&quot; id=&quot;markdown-toc-heading-sha3&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA3&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-hwacha&quot; id=&quot;markdown-toc-heading-hwacha&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hwacha&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-rocc-and-extension-instruction&quot; id=&quot;markdown-toc-heading-rocc-and-extension-instruction&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RoCC&lt;/code&gt; and extension instruction&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-rocc-component&quot; id=&quot;markdown-toc-heading-rocc-component&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RoCC&lt;/code&gt; component&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-extension-instruction-with-rocc&quot; id=&quot;markdown-toc-heading-extension-instruction-with-rocc&quot;&gt;extension instruction with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RoCC&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-hellacache&quot; id=&quot;markdown-toc-heading-hellacache&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HellaCache&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-chisel-tester2&quot; id=&quot;markdown-toc-heading-chisel-tester2&quot;&gt;Chisel-Tester2&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-hammer&quot; id=&quot;markdown-toc-heading-hammer&quot;&gt;Hammer&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-computer-architecture&quot; id=&quot;markdown-toc-heading-computer-architecture&quot;&gt;Computer Architecture&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-memory-fence-and-memory-barrier&quot; id=&quot;markdown-toc-heading-memory-fence-and-memory-barrier&quot;&gt;Memory Fence and Memory Barrier&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-page-table-walk&quot; id=&quot;markdown-toc-heading-page-table-walk&quot;&gt;Page Table Walk&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-translation-lookaside-buffer&quot; id=&quot;markdown-toc-heading-translation-lookaside-buffer&quot;&gt;Translation Lookaside Buffer&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-cache-hierarchy&quot; id=&quot;markdown-toc-heading-cache-hierarchy&quot;&gt;Cache Hierarchy&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-memory-read-synchronous-and-asynchronous&quot; id=&quot;markdown-toc-heading-memory-read-synchronous-and-asynchronous&quot;&gt;Memory Read (Synchronous and Asynchronous)&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-some-trouble&quot; id=&quot;markdown-toc-heading-some-trouble&quot;&gt;Some Trouble&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-psutil&quot; id=&quot;markdown-toc-heading-psutil&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;psutil&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-import-classes-into-intellij-idea&quot; id=&quot;markdown-toc-heading-import-classes-into-intellij-idea&quot;&gt;Import classes into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IntelliJ IDEA&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-import-reliance-into-sbt-project&quot; id=&quot;markdown-toc-heading-import-reliance-into-sbt-project&quot;&gt;Import reliance into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sbt&lt;/code&gt; project&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-can-not-find-the-lvy-local-lib&quot; id=&quot;markdown-toc-heading-can-not-find-the-lvy-local-lib&quot;&gt;Can not find the lvy local lib&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;heading-20191209-15&quot;&gt;2019/12/09-15&lt;/h1&gt;

&lt;p&gt;Last week, I finished the draft version of the matrix sum with Chisel and became half-familiar with it. Also, I tried to write a functional test with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chisel-tester2&lt;/code&gt;. Unfortunately, due to the complex and unstable environment, I can not check all the syntax or run the functional test, but I tried to use the environment in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jupyter&lt;/code&gt; to run a simple test and two small submodules had been proved right. To use Chisel and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chipyard&lt;/code&gt;'s components, I studied one sample project named &lt;a href=&quot;#SHA3&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA3&lt;/code&gt;&lt;/a&gt;. If I have more time, I'd back here to restudy that.&lt;/p&gt;

&lt;p&gt;Fortunately, while I was programming the matrix sum project, I realized the feeling of distinguishing the difference of Scala types and hardware types. I mean, I knew why we can utilize the features of Scala to boost our efficiency of design our circuits and when we should create a hardware register to store our mediate data, why the hardware type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UInt&lt;/code&gt; can not be translated to the Scala type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Int&lt;/code&gt;. Just because Scala is the hardware generator, it's a software programming language, its types exist when we build the project. But as for hardware types, they only exist when the circuits running. So we can not get an unknown value and translate it to a must-know value.&lt;/p&gt;

&lt;p&gt;So this week, I'll try to finish the related C files and run the simulation on FPGA boards. Also, I need to learn some Scala programming skills to enhance my Chisel coding ability.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading-git-command&quot;&gt;Git Command&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html&quot;&gt;some useful command and the explanation of git&lt;/a&gt;.
&lt;img src=&quot;https://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png&quot; alt=&quot;the work flow&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;heading-the-workflow&quot;&gt;the workflow&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Workspace&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Index/Stage&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Repository&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Remote&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;heading-build-a-git-project&quot;&gt;Build a git project&lt;/h3&gt;

&lt;h4 id=&quot;heading-create-one-new-project&quot;&gt;Create one new project&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git init [project-name]&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;heading-config&quot;&gt;Config&lt;/h4&gt;

&lt;p&gt;show current git config: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --list&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;heading-addremove-files&quot;&gt;add/remove files&lt;/h4&gt;

&lt;p&gt;These files will be added or removed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Index&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rm/add [file1] [file2]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git mv [file-original] [file-renamed]&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;heading-commit-codes-from-index-to-repository&quot;&gt;Commit codes from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Index&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Repository&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;These commands will update all the changes from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Index&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Repository&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -m 'yourmessage'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -v&lt;/code&gt; to show all the differences.&lt;/p&gt;

&lt;h4 id=&quot;heading-push-codes-from-repository-to-remote&quot;&gt;Push codes from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Repository&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Remote&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push [remote] [branch]&lt;/code&gt; to push one of the local branches.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull [remote] [branch]&lt;/code&gt; to get the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Remote&lt;/code&gt; codes into your workspace.&lt;/p&gt;

&lt;h4 id=&quot;heading-show-information&quot;&gt;Show Information&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; to check all the changed files&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt; to show the current branch's changelog&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git diff&lt;/code&gt; to show the differences between the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Workspace&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Index&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git diff HEAD&lt;/code&gt; to show the difference between the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Workspace&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Repository&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git diff --shortstat &quot;@{0 day ago}&quot;&lt;/code&gt; to show your daily coding lines number&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch&lt;/code&gt;: show the current branches&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git remote -v&lt;/code&gt; show the remote information&lt;/p&gt;

&lt;h3 id=&quot;heading-other-git-commands&quot;&gt;Other Git Commands&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull origin master&lt;/code&gt;: download the newest project from remote and merge it into the current branch.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git stash&lt;/code&gt;: ignore the current changes and then can switch to another branch.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout [branch]&lt;/code&gt;: switch to another branch&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch -d [branch]&lt;/code&gt;: The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-d&lt;/code&gt; option stands for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--delete&lt;/code&gt;, which would delete the local branch, only if you have already pushed and merged it with your remote branches&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch -D [branch]&lt;/code&gt;: The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-D&lt;/code&gt; option stands for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--delete --force&lt;/code&gt;, which deletes the branch regardless of its push and merge status&lt;/p&gt;

&lt;h2 id=&quot;heading-matrix-sum-accelerator&quot;&gt;Matrix Sum Accelerator&lt;/h2&gt;

&lt;p&gt;This is the lab project in fall 2013 of UCB.&lt;/p&gt;

&lt;h2 id=&quot;heading-chisel3-syntax&quot;&gt;Chisel3 Syntax&lt;/h2&gt;

&lt;p&gt;We can check the syntax at &lt;a href=&quot;https://www.chisel-lang.org/api/latest/chisel3/index.html&quot;&gt;its official website&lt;/a&gt;. Here lists some high efficient and frequently used syntaxes. And also I printed &lt;a href=&quot;https://www.chisel-lang.org/doc/chisel-cheatsheet3.pdf/&quot;&gt;Chisel3 Cheat Sheet&lt;/a&gt; which greatly save my time.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vec&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Seq&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Queen&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DecoupledIO&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PriorityEncoder&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SyncReadMem&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flipped&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;heading-linux-c-syntax&quot;&gt;(Linux) C Syntax&lt;/h2&gt;

&lt;h3 id=&quot;heading-asm-volatile&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asm volatile&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asm volatile&lt;/code&gt; is the inline assembly that used in language Linux C. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asm&lt;/code&gt; is the keyword of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volatile&lt;/code&gt; means &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc&lt;/code&gt; don't need to optimize the assemble codes. There is &lt;a href=&quot;https://blog.csdn.net/slvher/article/details/8864996&quot;&gt;a brief introduction&lt;/a&gt; of this. And I found this term while I was trying to &lt;a href=&quot;#Instruction test with C&quot;&gt;test the custom extensive instructions&lt;/a&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RoCC&lt;/code&gt; interface. This syntax can run our instruction without change the compiler. Plus, it can help our C program to run several commands in order with the help of &lt;a href=&quot;https://blog.csdn.net/KISSMonX/article/details/9105823&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asm volatile(&quot;&quot; ::: &quot;memory&quot;)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This syntax also has a feature named &lt;a href=&quot;https://blog.csdn.net/wudiyi815/article/details/8468745&quot;&gt;Atomic&lt;/a&gt;. That means this command only has to states in runtime: either success or failure.&lt;/p&gt;

&lt;h3 id=&quot;heading-create-a-c-matrix-with-2-d-array&quot;&gt;create a C matrix with 2-D Array&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/ZYTTAE/article/details/40017401&quot;&gt;Define and initialize the matrix&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//initialize the static matrix&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// define the struct, need a pointer. m means row and n means column&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//apply for memory space, use malloc()&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//initialize the matrix with the zero element.&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;initial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//free the memory space&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//finished&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;heading-pointer-and-address-access&quot;&gt;Pointer and address access&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/synapse7/article/details/10260339&quot;&gt;This blog&lt;/a&gt; describes and interprets the usage of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; to get the address of one data or get the corresponding value of the address.&lt;/p&gt;

&lt;h2 id=&quot;heading-risc-v-spec&quot;&gt;RISC-V SPEC&lt;/h2&gt;

&lt;h2 id=&quot;heading-chipyard&quot;&gt;Chipyard&lt;/h2&gt;

&lt;h3 id=&quot;heading-sha3&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA3&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;I mimicked &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA3&lt;/code&gt;, which also acts as one official sample to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RoCC&lt;/code&gt;. To write my accelerator, I had to study the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA3&lt;/code&gt; project.&lt;/p&gt;

&lt;p&gt;If one wants to harness &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RoCC&lt;/code&gt; interface to add extensive instructions, he must design his Chisel hardware project firstly and then write some C tests to prove this project works. Then modify some C files to let the compiler utilize your new instructions.&lt;/p&gt;

&lt;h4 id=&quot;heading-sha3-chisel&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA3&lt;/code&gt;-Chisel&lt;/h4&gt;

&lt;h5 id=&quot;heading-sha3scala&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha3.scala&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;This is the top module of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA3&lt;/code&gt; project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/ErYI4gMr0rkyBzVu/RoCCinSHA3.png&quot; alt=&quot;RoCCinSHA3&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;heading-ctrlscala&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl.scala&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;This is the most complex submodule of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA3&lt;/code&gt; project. It contains how to decode the instructions, as well as three finite-state machines. One (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rocc_s&lt;/code&gt;) shows the states of the communication between the control module and the CPU(or receives instructions from CPU and uses ready-valid signals to show some states of the accelerator); One (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mem_s&lt;/code&gt;) shows the states of the communication between the control module and the memory(or receives data from memory and send data back to memory and also ready-valid signals); The last one (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt;) shows the states of the communication between the control module and its submodules.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dpath.scala&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is the data path of the whole module.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dmem.scala&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is the module responsible for transform data between memory and the accelerator. So we can use this module with just a slight modifying.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/Mz1ZvpxNzfoxeoSc/dcache_req.png&quot; alt=&quot;dcache_req&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/cPCqqdGa1H84XK7w/dcache_resp.png&quot; alt=&quot;dcache_resp&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;heading-sha3-test&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA3&lt;/code&gt;-test&lt;/h4&gt;

&lt;h3 id=&quot;heading-hwacha&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hwacha&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hwacha&lt;/code&gt; is another more complex sample of custom extensive instructions. Plus, it also used as a component to realize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RISC-V&lt;/code&gt; Standard Vector instructions. But it's quite complex and time tiny, so I didn't learn it thoroughly last week.&lt;/p&gt;

&lt;h4 id=&quot;heading-hwacha-chisel&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hwacha&lt;/code&gt;-Chisel&lt;/h4&gt;

&lt;h2 id=&quot;heading-rocc-and-extension-instruction&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RoCC&lt;/code&gt; and extension instruction&lt;/h2&gt;

&lt;h3 id=&quot;heading-rocc-component&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RoCC&lt;/code&gt; component&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RoCC&lt;/code&gt; interface includes two main IO, one is for processor core and the other is for cache or memory. Due to the feature of Scala, we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;io.cmd&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;io.mem&lt;/code&gt; to show this. And both IOs own several kinds of signals, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;io.cmd.valid&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;io.cmd.ready&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;io.cmd.bits&lt;/code&gt;, also the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;io.mem.req&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;io.mem.resp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/TG7ZkpEShygfsJDX/rocc_interface.png&quot; alt=&quot;RoCC interface&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see it in more details from the photo below. &lt;strong&gt;NOTE: this graph is a little old as it was published in 2015, and there are several slight changes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/ZhQo3Zs8BIQ8xrbL/RoCC2015.png&quot; alt=&quot;RoCC 2015&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;heading-extension-instruction-with-rocc&quot;&gt;extension instruction with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RoCC&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The table below shows the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RoCC&lt;/code&gt; instruction format.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/2f63j2FAWmENrt14/rocc_instruction_format.png&quot; alt=&quot;RoCC instruction format&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;heading-rocc-chisel&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RoCC&lt;/code&gt;-Chisel&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://images-cdn.shimo.im/YhCOHPhZvhoGkkve/RoCCIO.png&quot; alt=&quot;RoCC IO&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;heading-instruction-test-with-c&quot;&gt;Instruction test with C&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/seldridge/rocket-rocc-examples&quot;&gt; Tests for example Rocket Custom Coprocessors&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;heading-hellacache&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HellaCache&lt;/code&gt;&lt;/h3&gt;

&lt;h2 id=&quot;heading-chisel-tester2&quot;&gt;Chisel-Tester2&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ucb-bar/chisel-testers2&quot;&gt;main-page&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;heading-hammer&quot;&gt;Hammer&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ucb-bar/hammer&quot;&gt;main-page&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;heading-computer-architecture&quot;&gt;Computer Architecture&lt;/h2&gt;

&lt;h3 id=&quot;heading-memory-fence-and-memory-barrier&quot;&gt;Memory Fence and Memory Barrier&lt;/h3&gt;

&lt;h3 id=&quot;heading-page-table-walk&quot;&gt;Page Table Walk&lt;/h3&gt;

&lt;h4 id=&quot;heading-ptw-introduction&quot;&gt;PTW Introduction&lt;/h4&gt;

&lt;h3 id=&quot;heading-translation-lookaside-buffer&quot;&gt;Translation Lookaside Buffer&lt;/h3&gt;

&lt;h4 id=&quot;heading-tlb-introduction&quot;&gt;TLB Introduction&lt;/h4&gt;

&lt;p&gt;With the help of TLB, the CPU may access the physical address &lt;a href=&quot;https://blog.csdn.net/leishangwen/article/details/27190959&quot;&gt;with just one accessment&lt;/a&gt;. And it contains both some copies of the page table and the physical address.&lt;/p&gt;

&lt;h4 id=&quot;heading-tlb-passthrough&quot;&gt;TLB passthrough&lt;/h4&gt;

&lt;p&gt;When I looked through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLB.scala&lt;/code&gt; I found a valuable named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;passthrough&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;heading-cache-hierarchy&quot;&gt;Cache Hierarchy&lt;/h3&gt;

&lt;p&gt;I found the following information when I tried to understand the meaning of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memory tag&lt;/code&gt;. I met this term while I was trying to mimic &lt;a href=&quot;#SHA3-Chisel&quot;&gt;the control module&lt;/a&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA3&lt;/code&gt;. Because it extends from &lt;a href=&quot;#HellaCache&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HellaCache&lt;/code&gt;&lt;/a&gt;, which require a tag. Although finally, I found I can give out tag casually, I learned a lot from the structure of cache including TLB.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/80/v2-0e77de9fe46e80c179204da1bf9ad6b2_hd.jpg&quot; alt=&quot;Cache hierarchy of the K8 core in the AMD Athlon 64 CPU&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The picture above illustrates the abstract architecture of the cache hierarchy of one AMD CPU, from which we can see &lt;a href=&quot;#TLB&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLB&lt;/code&gt;&lt;/a&gt; and Cache. Both these two components contain two levels and save instructions and data separately.&lt;/p&gt;

&lt;p&gt;If we see memory hierarchy excluding TLB, then it looks like the following picture:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www-x-wowotech-x-net.img.abc188.com/content/uploadfile/201905/95101556803041.png&quot; alt=&quot;Cortex-A53 memory hierarchy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And because of the dramatically booming speeds of high-level caches, they can improve the performance of the CPU. &lt;a href=&quot;http://www.wowotech.net/memory_management/458.html&quot;&gt;We can regard&lt;/a&gt; the cache is a method to improve the R/W speed of main memory, the CPU register is a method to improve that of the cache.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www-x-wowotech-x-net.img.abc188.com/content/uploadfile/201905/3d2f1556803040.jpg&quot; alt=&quot;cache speed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So how can the cache controller know whether the data we need is included in current cache? So &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tag&lt;/code&gt; comes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www-x-wowotech-x-net.img.abc188.com/content/uploadfile/201906/914f1559459886.png&quot; alt=&quot;the usage of tag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see from the graph above, there is a tag array and its corresponding data array. Firstly, the controller will use the index to find a cache line and then compares the tag array, then bingo.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/31875174&quot;&gt;Sinaean Dean&lt;/a&gt; introduced the two usages of cache tag:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;For caches parallelly connected, using tags as a selection signal in a MUX to choose the right data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Know whether cache hits or misses.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the cache miss, then it will ask a lower lever cache for the data or instructions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www-x-wowotech-x-net.img.abc188.com/content/uploadfile/201905/560d1556803043.png&quot; alt=&quot;cooperation between different levels of caches&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;heading-memory-read-synchronous-and-asynchronous&quot;&gt;Memory Read (Synchronous and Asynchronous)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/kalo1111/p/3245056.html&quot;&gt;This blog&lt;/a&gt; describes the &lt;a href=&quot;#Chisel3 Syntax&quot;&gt;synchronous memory&lt;/a&gt; – SSRAM, which is controlled by the clock and can not read or write at the same clock cycle. But if we use asynchronous memory, then we can get the read data within one clock and if we use a combinational/asynchronous-read, sequential/synchronous-write memory, then the read-after-write hazards &lt;a href=&quot;https://www.chisel-lang.org/api/latest/chisel3/Mem.html&quot;&gt;are not an issue&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;heading-some-trouble&quot;&gt;Some Trouble&lt;/h2&gt;

&lt;h3 id=&quot;heading-psutil&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;psutil&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;ERROR INFO: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;No module named psutil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But I have installed this module. Then via &lt;a href=&quot;https://blog.csdn.net/weixin_42348333/article/details/85068701&quot;&gt;some blogs&lt;/a&gt;, I find that might be the version of python that excursive doesn't install the module. So I &lt;a href=&quot;https://blog.csdn.net/u011534057/article/details/51615193&quot;&gt;changed the default version of python&lt;/a&gt; from 2.7 to 3.5 and reinstall it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip3&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;heading-import-classes-into-intellij-idea&quot;&gt;Import classes into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IntelliJ IDEA&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;I use some modules of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chipyard&lt;/code&gt;, which means I have to import that project into my project.&lt;/p&gt;

&lt;p&gt;In the beginning, I just add the files which contain the Scala files directly, but it didn't work at all. Because the packages and classes are defined at a more high level.&lt;/p&gt;

&lt;p&gt;By accidentally, I included the highest file (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;generator&lt;/code&gt; in this case) and it succeeds.&lt;/p&gt;

&lt;h3 id=&quot;heading-import-reliance-into-sbt-project&quot;&gt;Import reliance into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sbt&lt;/code&gt; project&lt;/h3&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;matrixsum&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;conditionalDependsOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/home/singularity/chipyard/generators/matrixsum&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;dependsOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rocketchip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chisel_testers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sifive_blocks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sifive_cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utilities&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midasTargetUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commonSettings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But that's works on the top module, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dependson&lt;/code&gt; must be a subfile of the current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt;  directory.&lt;/p&gt;

&lt;h3 id=&quot;heading-can-not-find-the-lvy-local-lib&quot;&gt;Can not find the lvy local lib&lt;/h3&gt;

&lt;p&gt;&lt;del&gt;Haven't solved yet&lt;/del&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Solved at Dec 28th by republishing it with the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version := 1.2-SNAPSHOT&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-pseudocode&quot;&gt;1 targets failed
adder.compileClasspath 
Resolution failed for 1 modules:
--------------------------------------------
				edu.berkeley.cs:treadle_2.12:1.2-SNAPSHOT 
				not found: /home/singularity/.ivy2/local/edu.berkeley.cs/treadle_2.12/1.2-SNAPSHOT/ivys/ivy.xml
				not found: https://repo1.maven.org/maven2/edu/berkeley/cs/treadle_2.12/1.2-SNAPSHOT/treadle_2.12-1.2-SNAPSHOT.pom
				not found: https://oss.sonatype.org/content/repositories/releases/edu/berkeley/cs/treadle_2.12/1.2-SNAPSHOT/treadle_2.12-1.2-SNAPSHOT.pom
&lt;/code&gt;&lt;/pre&gt;</content><author><name>SingularityKChen</name></author><category term="WeeklyReview" /><category term="git" /><category term="RISC-V" /><category term="RoCC" /><category term="Chipyard" /><category term="SHA3" /><category term="cache" /><summary type="html">This just a test excerpt</summary></entry></feed>